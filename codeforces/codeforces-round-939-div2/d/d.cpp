#include <bits/stdc++.h>
#include <functional>

/**
 * problem D (4/6)
 * codeforces, codeforces-round-939-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    vi va = Reader::vector<int>(n);
    vvi dp = vvi(n + 1, vi(n + 1, 0));
    vvi par = vvi(n + 1, vi(n + 1, 0));
    for (int i: range(n)) {
        dp[i][0] = 0;
        par[i][0] = -2;
    }
    for (int length: range(1, n + 1)) {
        for (int i: rrange(n)) {
            if (i + length > n) {
                continue;
            }
            int &res = dp[i][length];
            int &papa = par[i][length];

            // -2
            res = 0;
            for (int j: range(i, i + length)) {
                res += va[j];
            }
            papa = -2;

            // -1
            smax(res, length * length, [&]() { papa = -1; });

            for (int k: range(i, i + length)) {
                int alter_len = k - i + 1;
                if (alter_len >= length) {
                    break;
                }
                smax(res, dp[i][alter_len] + dp[k + 1][length - alter_len],
                     [&]() { papa = k; });
            }
        }
    }

    std::cout << dp[0][n] << ' ';

    std::vector<pii> ways;
    std::queue<pii> q;
    q.push({0, n});
    std::function<void(int, int)> procedure = [&](int i, int length) {
        // for generating 0
        ways.emplace_back(i, i);
        int length_backup = length;
        length--;
        while (length >= 1) {
            procedure(i + 1, length);
            length--;
        }
        // now we can call the whole range
        length = length_backup;
        ways.emplace_back(i, length + i - 1);
    };
    while (!q.empty()) {
        auto &[i, length] = q.front();
        q.pop();
        int papa = par[i][length];
        if (papa == -1) {
            // turn every zeros to 1
            for (int j: range(i, length + i)) {
                if (va[j] == 0) {
                    ways.emplace_back(j, j);
                }
            }
            procedure(i, length);
            // ways.emplace_back(i, length + i - 1);
        } else if (papa == -2) {
        } else {
            int alter_len = papa - i + 1;
            if (alter_len) {
                q.emplace(i, alter_len);
            }
            if (length - alter_len) {
                q.emplace(papa + 1, length - alter_len);
            }
        }
    }
    std::cout << sz(ways) << '\n';
    for (pii &lr: ways) {
        std::cout << lr.first + 1 << ' ' << lr.second + 1 << '\n';
    }
    return;
}

int second_main() {
    solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    // std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
