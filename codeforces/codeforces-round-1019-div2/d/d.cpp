#include <algorithm>
#include <bits/stdc++.h>

/**
 * problem D (4/6)
 * codeforces, codeforces-round-1019-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;
vi in_deg;
vi topol;
vi color;
vvi adj;
std::vector<std::map<int, int>> mp;

/**
 * define functions here
 **/

void make_edge(int u, int v, int not_reversed) {
    std::swap(u, v);
    if (u >= 0 && v >= 0 && u < n && v < n) {
        if (!not_reversed) {
            std::swap(u, v);
        }
        if (mp[u].find(v) != mp[u].end()) {
            // we got that edge
            return;
        }
        // trace(u _ v);
        mp[u][v] = 1;
        adj[u].push_back(v);
        in_deg[v]++;
    }
}

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    vi arr = Reader::vector<int>(n);
    int maxi = -1;
    int min_one_idx = -1;
    for (int i: range(n)) {
        smax(maxi, arr[i]);
        if (arr[i] == -1) {
            min_one_idx = i;
        }
    }
    arr[min_one_idx] = maxi + 1;
    vi le, ri;
    topol.clear();
    in_deg = vi(n, 0);
    adj = vvi(n, vi());
    color = vi(n, 0);
    mp = std::vector<std::map<int, int>>(n, std::map<int, int>());

    for (int i: range(1, maxi + 5)) {
        // create le and ri
        le = vi(n, -1);
        for (int j: range(1, n)) {
            if (arr[j - 1] != 0) {
                le[j] = j - 1;
            } else {
                le[j] = le[j - 1];
            }
        }
        ri = vi(n, -1);
        for (int j: rrange(n - 1)) {
            if (arr[j + 1] != 0) {
                ri[j] = j + 1;
            } else {
                ri[j] = ri[j + 1];
            }
        }
        // trace(le);
        // trace(ri);

        int far_right = -1;
        for (int j: rrange(n)) {
            if (arr[j] > i) {
                far_right = j;
                break;
            }
        }

        int idx = 0;
        while (idx != -1 && arr[idx] == 0) {
            idx = ri[idx];
        }
        while (idx != -1) {
            if (arr[idx] == i) {
                // it's gone
                if (idx < far_right) {
                    make_edge(idx, ri[idx], i % 2);
                } else {
                    make_edge(ri[idx], idx, i % 2);
                }
            } else {
                // still in
                make_edge(le[idx], idx, i % 2);
                make_edge(ri[idx], idx, i % 2);
            }
            idx = ri[idx];
        }

        // remove the i's occurrenses
        for (int j: range(n)) {
            if (arr[j] == i) {
                arr[j] = 0;
            }
        }
    }
    std::queue<int> q;
    for (int i: range(n)) {
        if (in_deg[i] == 0) {
            q.push(i);
            color[i] = 1;
        }
    }

    vi sorted;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        color[u] = 2;
        sorted.push_back(u);
        // trace(u + 1);
        for (int v: adj[u]) {
            // trace("we got " _ u _ v);
            in_deg[v]--;
            if (color[v] == 0 && in_deg[v] == 0) {
                color[v] = 1;
                q.push(v);
            }
        }
    }
    vi ans(n);
    int iter = 0;
    for (int t: sorted) {
        ans[t] = iter++ + 1;
    }
    return ans;
}

int second_main() {
    auto ans = solve();
    for (int i: range(sz(ans))) {
        std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    }
    // std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
