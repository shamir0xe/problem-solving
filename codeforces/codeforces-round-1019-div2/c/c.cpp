#include <bits/stdc++.h>

/**
 * problem C (3/6)
 * codeforces, codeforces-round-1019-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    int k;
    std::cin >> n >> k;
    vi arr = Reader::vector<int>(n);
    vi cl(n, 0);
    vi cr(n, 0);
    for (int i: range(n)) {
        cl[i] = arr[i] <= k ? -1 : +1;
        if (i - 1 >= 0) {
            cl[i] += cl[i - 1];
        }
    }
    for (int i: rrange(n)) {
        cr[i] = arr[i] <= k ? -1 : +1;
        if (i + 1 < n) {
            cr[i] += cr[i + 1];
        }
    }
    // trace(cl);
    // trace(cr);
    int first_left_low = -1;
    for (int i: range(n)) {
        if (cl[i] <= 0) {
            first_left_low = i;
            break;
        }
    }
    // trace(first_left_low);
    int first_right_low = -1;
    for (int i: rrange(n)) {
        if (cr[i] <= 0) {
            first_right_low = i;
            break;
        }
    }
    // trace(first_right_low);
    int cnt_l = 0;
    int cnt_r = 0;
    int cnt_lz = 0;
    int cnt_rz = 0;
    for (int i: range(n)) {
        if (cl[i] < 0) {
            cnt_l++;
        } else if (cl[i] == 0) {
            cnt_lz++;
        }
        if (cr[i] < 0) {
            cnt_r++;
        } else if (cr[i] == 0) {
            cnt_rz++;
        }
    }
    if (cnt_l >= 2 || cnt_r >= 2 || cnt_lz >= 2 || cnt_rz >= 2) {
        return true;
    }
    if (first_left_low == -1 || first_right_low == -1) {
        return false;
    }
    if (first_right_low - first_left_low > 1) {
        return true;
    }
    return false;
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << (ans ? "YES" : "NO") << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
