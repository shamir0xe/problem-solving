#include <bits/stdc++.h>
using namespace std;

/**
 * problem E (5/6)
 * codeforces, codeforces-round-905-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

// define variables here
#define MAX_M 15
int n;
int t;
vector<vector<pii>> adj;
vi moments;


// define functions here

int read_input() {
    cin >> n >> t;
    adj.resize(n);
    adj.assign(n, vector<pii>());
    for (int i: range(t)) {
        int m;
        cin >> m;
        for (int j: range(m)) {
            int u, v;
            cin >> u >> v;
            u--;
            v--;
            adj[u].push_back({v, i});
            adj[v].push_back({u, i});
        }
    }
    int k;
    cin >> k;
    moments.resize(k);
    for (int i: range(k)) cin >> moments[i];
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    priority_queue <pii> pq;
    pq.push({0, 0});
    vi dists(n, 1e9);
    vvi times(t);
    // trace("her");
    for (int i: range(sz(moments))) {
        times[moments[i] - 1].push_back(i);
    }
    // trace("her");
    while (!pq.empty()) {
        pii head = pq.top();
        int time = -head.X;;
        int u = head.Y;
        // trace(u _ time);
        if (u == n - 1) return time;
        pq.pop();
        if (dists[u] < time) continue;
        for (pii &edge: adj[u]) {
            int v = edge.X;
            int ttime = edge.Y;
            // trace(v _ ttime);
            auto itr = lower_bound(times[ttime].begin(), times[ttime].end(), time);
            if (itr != times[ttime].end()) {
                int idx = (*itr) + 1;
                // trace(idx);
                if (dists[v] > idx) {
                    dists[v] = idx;
                    pq.push({-idx, v});
                }

            }
        }
    }
    return -1;
}

int second_main() {
    read_input();
    auto ans = solve();
    cout << ans << endl;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = false;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
