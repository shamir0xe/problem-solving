#include <bits/stdc++.h>
using namespace std;

/**
 * problem G (7/13)
 * codeforces,
 * compfest-15-preliminary-online-mirror-unrated-icpc-rules-teams-preferred
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

// define variables here
#define MAX_M 15
int n;
vi arr;
vi dists;
vector<vector<pii>> intervals;

// define functions here

int read_input() {
    cin >> n;
    arr.resize(n);
    for (int i: range(n))
        cin >> arr[i];
    dists.resize(n);
    for (int i: range(n))
        cin >> dists[i];
    return 0;
}

bool can(int m) {
    priority_queue<pii> pq;
    for (int i: range(n)) {
        if (!pq.empty()) {
            pii head = pq.top();
            if (-head.X < i)
                return false;
        }
        for (pii &t: intervals[i]) {
            pq.push({-t.X, t.Y});
        }
        int cur = 0;
        while (!pq.empty() && cur < m) {
            pii head = pq.top();
            pq.pop();
            int t = min(head.Y, m - cur);
            cur += t;
            if (t != head.Y) {
                pq.push({head.X, head.Y - t});
            }
        }
    }
    return pq.empty();
}

auto solve() {
    /**
     * main logic goes here
     **/
    intervals.resize(n);
    for (int i: range(n)) {
        int s = max(i - dists[i], 0);
        int e = min(i + dists[i], n - 1);
        if (arr[i] > 0)
            intervals[s].push_back({e, arr[i]});
    }
    if (can(0))
        return 0;
    int s = 0;
    int e = 1e9;
    while (e - s > 1) {
        int m = (e + s) >> 1;
        if (can(m))
            e = m;
        else
            s = m;
    }
    return e;
}

int second_main() {
    read_input();
    auto ans = solve();
    cout << ans << endl;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = false;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
