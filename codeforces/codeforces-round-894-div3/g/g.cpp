#include <algorithm>
#include <bits/stdc++.h>

/**
 * problem G (7/7)
 * codeforces, codeforces-round-894-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;
vi arr;

/**
 * define functions here
 **/
int read_input() {
    std::cin >> n;
    arr = Reader::vector<int>(n);
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/

    std::map<int, int> mp, dists;
    for (int t: arr) {
        mp[t]++;
    }
    bool first = true;
    int bef = -1;
    for (auto &itr: mp) {
        int cur = itr.first;
        if (first) {
            bef = cur;
            first = false;
            continue;
        }
        dists[cur - bef]++;
        bef = cur;
    }
    auto increase = [&](int diff) { dists[diff]++; };
    auto decrease = [&](int diff) {
        dists[diff]--;
        if (dists[diff] == 0) {
            dists.erase(dists.find(diff));
        }
    };
    auto get_iterators = [&](int v) {
        auto nx = mp.lower_bound(v + 1);
        auto bf = mp.lower_bound(v);
        if (bf == mp.begin()) {
            bf = mp.end();
        } else {
            bf--;
        }
        return std::make_pair(nx, bf);
    };
    auto erase = [&](int v) {
        mp[v]--;
        if (mp[v] > 0) {
            return;
        }
        // mp[v] = 0
        mp.erase(mp.find(v));
        auto [nx, bf] = get_iterators(v);
        if (nx != mp.end()) {
            decrease(nx->first - v);
        }
        if (bf != mp.end()) {
            decrease(v - bf->first);
        }
        if (nx != mp.end() && bf != mp.end()) {
            increase(nx->first - bf->first);
        }
    };
    auto insert = [&](int v) {
        mp[v]++;
        if (mp[v] > 1) {
            return;
        }
        // mp[v] = 1
        auto [nx, bf] = get_iterators(v);
        if (nx != mp.end() && bf != mp.end()) {
            decrease(nx->first - bf->first);
        }
        if (nx != mp.end()) {
            increase(nx->first - v);
        }
        if (bf != mp.end()) {
            increase(v - bf->first);
        }
    };
    int q;
    std::cin >> q;
    while (q--) {
        int idx, b;
        std::cin >> idx >> b;
        idx--;
        erase(arr[idx]);
        insert(b);
        arr[idx] = b;
        std::cout << (sz(dists) ? dists.rbegin()->first : 0) +
                         mp.rbegin()->first
                  << ' ';
    }
}

int second_main() {
    read_input();
    solve();
    std::cout << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
