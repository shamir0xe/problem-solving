#include <algorithm>
#include <bits/stdc++.h>

/**
 * problem G (7/7)
 * codeforces, codeforces-round-863-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
const int mod = 1000 * 1000 * 1000 + 7;
int n, k;
vi arr;
vi fac;
vi fac_inv;

/**
 * define functions here
 **/
int read_input() {
    std::cin >> n >> k;
    arr = Reader::vector<int>(n);
    return 0;
}

auto add = [](int a, int b) { return (a + b) % mod; };
auto mul = [](int a, int b) { return (a * 1ll * b) % mod; };

int choose(int k, int n) {
    return mul(fac[n], mul(fac_inv[k], fac_inv[n - k]));
}

int fast_pow(int a, int b) {
    int res = 1;
    while (b) {
        if (b & 1) {
            res = mul(res, a);
        }
        a = mul(a, a);
        b >>= 1;
    }
    return res;
}

void init_factoriels() {
    fac = vi(maxn);
    fac_inv = vi(maxn);
    fac[0] = 1;
    fac_inv[0] = 1;
    for (int i: range(1, maxn)) {
        fac[i] = mul(i, fac[i - 1]);
        fac_inv[i] = mul(fac_inv[i - 1], fast_pow(i, mod - 2));
    }
}

auto solve() {
    /**
     * main logic goes here
     **/
    if (k == 1) {
        return 1;
    }
    vi dp_max(n + 1, 0);
    for (int i: rrange(n)) {
        smax(dp_max[i], dp_max[i + 1]);
        int j = i;
        int cnt = 0;
        while (j < n && cnt < k) {
            if (arr[j] == arr[i]) {
                cnt++;
            }
            j++;
        }
        if (k == cnt) {
            smax(dp_max[i], dp_max[j] + 1);
        }
    }
    vvi indices(n + 1);
    for (int i: range(n)) {
        indices[arr[i]].push_back(i);
    }
    int m = dp_max[0];
    vvi dp(n + 1, vi(m + 1, 0));
    for (int i: range(n + 1)) {
        dp[i][0] = 1;
    }
    dp[n][0] = 1;
    for (int i: rrange(n)) {
        for (int t: range(1, m + 1)) {
            int &res = dp[i][t];
            res = dp[i + 1][t];
            int idx = std::lower_bound(all(indices[arr[i]]), i) -
                      indices[arr[i]].begin();
            int next_idx = idx + k - 1;
            while (next_idx < sz(indices[arr[i]]) && next_idx - idx <= 3 * k) {
                res = add(res, mul(choose(k - 2, next_idx - idx - 1),
                                   dp[indices[arr[i]][next_idx] + 1][t - 1]));
                next_idx++;
            }
        }
    }
    return dp[0][m];
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    init_factoriels();
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
