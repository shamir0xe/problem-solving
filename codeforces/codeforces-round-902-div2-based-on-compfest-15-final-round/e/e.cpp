#include <bits/stdc++.h>
#include <stdexcept>
using namespace std;

/**
 * problem E (5/7)
 * codeforces, codeforces-round-902-div2-based-on-compfest-15-final-round
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

// define variables here
#define MAX_M 15
int n;
vi arr;
vector<set<int>> radj;
vi ans;
int init_node;

// define functions here
bool dfs(int u, int side, multiset<pii> &st) {
    ans[u] = side;
    int v = arr[u];
    st.erase(st.lower_bound({1, v}));
    radj[v].erase(u);
    if (ans[u] == 1 && ans[v] == 1)
        return false;
    if (v == init_node)
        return true;
    int v_side = ans[v];
    if (side == 1)
        v_side = 2;
    if (v_side == 0)
        v_side = 1;
    return dfs(v, v_side, st);
}

int read_input() {
    cin >> n;
    arr.resize(n);
    radj.resize(n);
    for (int i: range(n)) {
        cin >> arr[i];
        arr[i] -= 1;
        radj[arr[i]].insert(i);
    }
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    multiset<pii> st;
    for (int i: range(n)) {
        st.insert({sz(radj[i]), i});
    }
    ans.assign(n, 0);
    while (!st.empty()) {
        auto &head = *st.begin();
        // trace(head);
        int u = head.Y;
        if (head.X == 0) {
            int v = arr[u];
            if (ans[u] == 0) {
                ans[u] = 1;
                ans[v] = 2;
            }
            st.erase(st.begin());
            auto itr = st.lower_bound({sz(radj[v]), v});
            if (itr != st.end()) {
                st.erase(itr);
                radj[v].erase(u);
                st.insert({sz(radj[v]), v});
            }
            continue;
        }
        // trace("next part" _ head.X);
        // head.X == 1
        break;
    }
    for (int u: range(n)) {
        if (sz(radj[u]) == 1 && ans[u] != 0) {
            init_node = u;
            bool cur = dfs(u, ans[u], st);
            if (!cur)
                return false;
        }
    }
    for (int u: range(n)) {
        if (sz(radj[u]) == 1 && ans[u] == 0) {
            init_node = u;
            bool cur = dfs(u, 1, st);
            if (!cur)
                return false;
        }
    }
    for (int u: range(n)) {
        if (ans[u] == 0) {
            // throw runtime_error("u is zero");
        }
    }
    return true;
}

int second_main() {
    read_input();
    bool res = solve();
    // trace(res);
    if (!res)
        cout << -1 << endl;
    else {
        int cnt = 0;
        for (int i: range(n)) {
            if (ans[i] == 1) {
                cnt++;
            }
        }
        cout << cnt << endl;
        for (int i: range(n)) {
            if (ans[i] == 1) {
                cout << arr[i] + 1 << ' ';
            }
        }
        cout << endl;
    }
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = false;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
