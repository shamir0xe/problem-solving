#include <bits/stdc++.h>

/**
 * problem F (6/6)
 * codeforces, educational-codeforces-round-160-rated-for-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

class Manacher {
  private:
    std::string str;

  public:
    Manacher(std::string &str) {
        int n = sz(str);
        std::string &res = this->str;
        if (n == 0) {
            res = "^$";
        }
        res = "^";
        for (int i: range(n)) {
            res += "#" + str.substr(i, 1);
        }
        res += "#$";
    }

    std::vector<int> get_lsp() {
        int n = sz(str);
        vi pals(n);
        int c = 0;
        int r = 0;
        for (int i: range(1, n - 1)) {
            int mirror = 2 * c - i;
            if (i < r) {
                pals[i] = std::min(r - i, pals[mirror]);
            }
            while (str[i + (1 + pals[i])] == str[i - (1 + pals[i])]) {
                pals[i]++;
            }

            if (i + pals[i] > r) {
                c = i;
                r = i + pals[i];
            }
        }
        return pals;
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    std::string str = Reader::primitive<std::string>();
    Manacher manacher(str);
    std::vector<std::map<char, int>> candidates(n);
    vi lps = manacher.get_lsp();
    // trace(lps);
    for (int i: range(2, sz(lps) - 2)) {
        int j = (i >> 1) - 1;
        int radi = (lps[i] + 1) >> 1;
        int left = j - radi;
        int right = j + radi + (lps[i] % 2 == 0 ? 1 : 0);
        // trace(i _ lps[i] _ j _ radi _ left _ right);
        if (left >= 0 && right < n) {
            // trace("bro");
            candidates[left][str[right]]++;
            candidates[right][str[left]]++;
        }
    }
    // for (int i: range(n)) {
    //     for (auto &entry: candidates[i]) {
    //         trace(i _ entry);
    //     }
    // }
    std::pair<pii, char> best{{-1, -1}, 'a'};
    for (int i: range(n)) {
        for (auto &candid: candidates[i]) {
            if (best.first.first == -1 || best.first.first < candid.second) {
                best = {{candid.second, i}, candid.first};
            } else if (best.first.first == candid.second &&
                       str[best.first.second] < best.second) {
                best = {{candid.second, i}, candid.first};
            }
        }
    }
    if (best.first.second != -1) {
        str[best.first.second] = best.second;
    }
    Manacher next(str);
    lps = next.get_lsp();
    ll ans = 0;
    for (int i: range(2, sz(lps) - 2)) {
        ans += (lps[i] + 1) >> 1;
    }
    return std::pair<std::string, ll>{str, ans};
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << ans.second << std::endl << ans.first << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
