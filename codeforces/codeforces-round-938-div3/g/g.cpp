#include <bits/stdc++.h>
#include <cstring>

/**
 * problem G (7/8)
 * codeforces, codeforces-round-938-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 1000 + 5;
int n, m;
vvi board;
vvi memo;
vi primes;

/**
 * define functions here
 **/

void sieve() {
    primes.clear();
    vi check(maxn, 1);
    for (int i: range(2, maxn)) {
        if (check[i]) {
            primes.push_back(i);
            for (ll j = 1ll * i * i; j < maxn; j += i) {
                check[(int)j] = 0;
            }
        }
    }
}

void gen(std::vector<pii> &mp, int i, int cur, vi &out) {
    if (i >= sz(mp)) {
        out.push_back(cur);
        return;
    }
    gen(mp, i + 1, cur, out);
    int temp = mp[i].first;
    for (int j: range(mp[i].second)) {
        gen(mp, i + 1, cur * temp, out);
        temp *= mp[i].first;
    }
}

vi generate(int a) {
    std::vector<pii> factors;
    for (int i: primes) {
        if (a % i == 0) {
            int cnt = 0;
            while (a % i == 0) {
                a /= i;
                cnt++;
            }
            factors.push_back({i, cnt});
        }
        if (1ll * i * i > a) {
            break;
        }
    }
    if (a != 1) {
        factors.push_back({a, 1});
    }
    vi out;
    gen(factors, 0, 1, out);
    return out;
}

int can(int i, int j, int t) {
    if (memo[i][j] != -1) {
        return memo[i][j];
    }
    int &res = memo[i][j] = 0;
    if (i == n - 1 && j == m - 1) {
        return res = 1;
    }
    if (i + 1 < n && board[i + 1][j] % t == 0) {
        res |= can(i + 1, j, t);
        if (res) {
            return res;
        }
    }
    if (j + 1 < m && board[i][j + 1] % t == 0) {
        res |= can(i, j + 1, t);
    }
    return res;
}
auto solve() {
    /**
     * main logic goes here
     **/
    // std::cin >> n >> m;
    scanf("%d%d", &n, &m);
    board = vvi(n, vi(m));
    for (int i: range(n)) {
        for (int j: range(m)) {
            scanf("%d", &board[i][j]);
            // std::cin >> board[i][j];
        }
        // board[i] = Reader::vector<int>(m);
    }
    int gcd = std::gcd(board[0][0], board[n - 1][m - 1]);
    // trace("good");
    vi possibles = generate(gcd);
    sort(all(possibles));
    reverse(all(possibles));
    // trace(possibles);
    for (int t: possibles) {
        memo.clear();
        memo.resize(n, vi(m, -1));
        if (can(0, 0, t)) {
            return t;
        }
    }
    return 1;
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    printf("%d\n", ans);
    // std::cout << ans << '\n';
    return 0;
}

int main() {
    // Reader::sync();
    bool test_case = true;
    sieve();
    if (test_case) {
        int t;
        scanf("%d", &t);
        // std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
