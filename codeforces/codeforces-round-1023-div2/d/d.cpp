#include <bits/stdc++.h>
#include <functional>

/**
 * problem D (4/6)
 * codeforces, codeforces-round-1023-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define range(i, n) for (int i = 0; i < n; ++i)
#define rrange(i, n) for (int i = n - 1; i >= 0; --i)
#define fr(i, a, n) for (int i = a; i < n; ++i)
#define rfr(i, a, n) for (int i = n - 1; i >= a; --i)
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * Reader class
 **/
class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    template <typename T, size_t n> static std::array<T, n> array() {
        std::array<T, n> res;
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int BLACK = 1000 * 100 + 111;
const int maxn = 1000 * 100 + 5;
int n;
int cur_color;
vi colors;
vi par;
vvi adj;

/**
 * define functions here
 **/
pii dfs(int u, int parent) {
    // trace(u _ parent);
    pii res{0, -1};
    colors[u] = cur_color;
    par[u] = parent;
    for (int v : adj[u]) {
        if (colors[v] != BLACK && colors[v] < cur_color) {
            pii temp = dfs(v, u);
            // trace(temp);
            smax(res, pii{temp.X, temp.Y});
        }
    }
    if (res.X == 0) {
        return pii{1, u};
    }
    return pii{res.X + 1, res.Y};
}

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    adj = vvi(n, vi());
    range(i, n - 1) {
        auto [u, v] = Reader::array<int, 2>();
        u--, v--;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    std::vector<std::tuple<int, int, int>> seq;
    cur_color = 0;
    colors = vi(n, 0);
    par = vi(n, -1);
    bool cycle = true;
    while (cycle) {
        cycle = false;
        rrange(u, n) {
            if (colors[u] != BLACK) {
                cur_color++;
                pii t = dfs(u, -1);
                cur_color++;
                pii tt = dfs(t.Y, -1);
                int temp = tt.Y;
                while (temp != t.Y) {
                    colors[temp] = BLACK;
                    temp = par[temp];
                }
                colors[temp] = BLACK;
                if (t.Y < tt.Y)
                    std::swap(t.Y, tt.Y);
                seq.emplace_back(tt.X, t.Y + 1, tt.Y + 1);
                // seq.push_back(tt.X);
                // seq.push_back(t.Y + 1);
                // seq.push_back(tt.Y + 1);
                cycle = true;
            }
        }
    }
    std::sort(all(seq), std::greater<std::tuple<int, int, int>>());
    vi ans;
    for (auto [a, b, c] : seq) {
        ans.push_back(a);
        ans.push_back(b);
        ans.push_back(c);
    }

    return ans;
}

int second_main() {
    auto ans = solve();
    range(i, sz(ans)) { std::cout << ans[i] << " \n"[i == sz(ans) - 1]; }
    // std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
