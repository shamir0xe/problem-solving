#include <algorithm>
#include <bits/stdc++.h>

/**
 * problem C (3/6)
 * codeforces, codeforces-round-1023-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define range(i, n) for (int i = 0; i < n; ++i)
#define rrange(i, n) for (int i = n - 1; i >= 0; --i)
#define fr(i, a, n) for (int i = a; i < n; ++i)
#define rfr(i, a, n) for (int i = n - 1; i >= a; --i)
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * Reader class
 **/
class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    template <typename T, size_t n> static std::array<T, n> array() {
        std::array<T, n> res;
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    ll k;
    std::cin >> n >> k;
    std::string mask = Reader::primitive<std::string>();
    vi arr = Reader::vector<int>(n);
    vl presum = vl(n);
    vl prefix = vl(n, 0);
    vi zeros;
    vl ans(n);
    ans.assign(all(arr));
    range(i, n) {
        if (mask[i] == '0') {
            zeros.push_back(i);
            ans[i] = -1e12;
        }
    }
    range(i, n) {
        presum[i] = ans[i];
        presum[i] += i - 1 >= 0 ? presum[i - 1] : 0;
        smin(prefix[i], presum[i]);
        smin(prefix[i], i - 1 >= 0 ? prefix[i - 1] : (ll)1e18);
    }
    // trace(zeros _ prefix _ min_prefix);

    auto calc_best = [&](vl arr, bool need_z) -> ll {
        // trace(arr);
        vl cs;
        cs.assign(all(arr));
        vl prefix(n, 0);
        range(i, n) {
            cs[i] += i - 1 >= 0 ? cs[i - 1] : 0;
            smin(prefix[i], cs[i]);
            smin(prefix[i], i - 1 >= 0 ? prefix[i - 1] : 0);
        }
        ll best = -1e18;
        if (!need_z) {
            range(i, n) {
                if (i - 1 >= 0) {
                    smax(best, cs[i] - prefix[i - 1]);
                } else {
                    smax(best, cs[i]);
                }
            }
        } else {
            // we need at least one zero
            range(i, n) {
                int idx = std::lower_bound(all(zeros), i + 1) - zeros.begin();
                idx--;
                if (idx < 0) {
                    continue;
                }
                int alter_idx = zeros[idx] - 1;
                if (alter_idx < 0) {
                    smax(best, cs[i]);
                } else {
                    smax(best, cs[i] - prefix[alter_idx]);
                }
            }
        }
        return best;
    };

    ll best = calc_best(ans, true);
    range(i, n) {
        int idx = std::lower_bound(all(zeros), i + 1) - zeros.begin();
        idx--;
        if (idx < 0) {
            continue;
        }
        int alter_idx = zeros[idx] - 1;
        ll cur = presum[i] - (alter_idx >= 0 ? prefix[alter_idx] : 0);
        if (cur == best) {
            ans[zeros[idx]] += k - cur;
            break;
        }
    }

    if (calc_best(ans, false) == k) {
        std::cout << "Yes\n";
        range(i, n) std::cout << ans[i] << ' ';
        std::cout << std::endl;
    } else {
        std::cout << "No\n";
    }
    return 0;
}

int second_main() {
    solve();
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
