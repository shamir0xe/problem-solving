#include <bits/stdc++.h>
using namespace std;

/**
 * problem G (7/7)
 * codeforces, codeforces-round-903-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

template <class S, auto op, auto e, auto collect> class Node {
  public:
    S value, lazy_v;
    bool lazy = false;
    Node *le = nullptr, *ri = nullptr;
    pii interval = {-1, -1};

    Node(pii interval) : interval(interval), value(e()), lazy_v(e()) {}
    bool within(int lele, int riri) {
        return lele <= interval.X && interval.Y <= riri;
    }
    bool contains(int idx) { return interval.X <= idx && idx <= interval.Y; }
    bool leaf() { return interval.X == interval.Y; }
    void relax() {
        value = op(value, lazy_v);
        lazy_v = e();
        lazy = false;
    }
    void propagate() {
        if (lazy && !leaf()) {
            ri->lazy_v = op(lazy_v, ri->lazy_v);
            le->lazy_v = op(lazy_v, le->lazy_v);
            ri->lazy = le->lazy = true;
        }
        relax();
    }
    S get_value() {
        propagate();
        return value;
    }
    template <class _S, auto _op, auto _e, auto _collect>
    friend ostream &operator<<(ostream &os,
                               const Node<_S, _op, _e, _collect> &node);
};

template <class S, auto op, auto e, auto collect>
ostream &operator<<(ostream &os, const Node<S, op, e, collect> &node) {
    os << "[(" << node.interval.X << ", " << node.interval.Y
       << ") value: " << node.value << "]";
    return os;
}

template <class S, auto op, auto e, auto collect> class SegTree {
  private:
    typedef Node<S, op, e, collect> SgNode;
    SgNode *root;

    void assign(SgNode *node, vi &v, int le, int ri) {
        if (le == ri) {
            node->value = v[le];
            return;
        }
        int mid = (le + ri) >> 1;
        node->le = new SgNode({le, mid});
        node->ri = new SgNode({mid + 1, ri});
        assign(node->le, v, le, (le + ri) >> 1);
        assign(node->ri, v, ((le + ri) >> 1) + 1, ri);
        node->value = collect(node->ri->value, node->le->value);
    }

    void update_interval(SgNode *node, int x, int le, int ri) {
        // trace(*node _ x _ le _ ri);
        if (node->within(le, ri)) {
            node->lazy_v = op(node->lazy_v, x);
            node->lazy = true;
            return;
        }
        if (node->interval.X > ri)
            return;
        if (node->interval.Y < le)
            return;
        update_interval(node->le, x, le, ri);
        update_interval(node->ri, x, le, ri);
    }

    S get_node(SgNode *node, int idx) {
        if (node->lazy) {
            node->propagate();
        }
        if (node->leaf())
            return node->get_value();
        if (node->le->contains(idx))
            return get_node(node->le, idx);
        return get_node(node->ri, idx);
    }

    S get_interval(SgNode *node, int le, int ri) {
        if (node->within(le, ri)) {
            return node->get_value();
        }
        if (ri < node->interval.X)
            return e();
        if (le > node->interval.Y)
            return e();
        node->propagate();
        return collect(get_interval(node->le, le, ri),
                       get_interval(node->ri, le, ri));
    }

    void set_node(SgNode *node, int idx, S x) {
        node->propagate();
        if (node->leaf()) {
            node->value = x;
            return;
        }
        if (node->le->contains(idx))
            set_node(node->le, idx, x);
        else
            set_node(node->ri, idx, x);
        node->value = collect(node->le->get_value(), node->ri->get_value());
    }

  public:
    SegTree(vector<S> &v) {
        root = new SgNode({0, sz(v) - 1});
        assign(root, v, 0, sz(v) - 1);
    }

    S get(int idx) { return get_node(root, idx); }

    void set(int idx, S x) { set_node(root, idx, x); }

    S get_interval(int le, int ri) { return get_interval(root, le, ri); }

    void update(int x, int le, int ri) { update_interval(root, x, le, ri); }
};

#define MAX_M 15
int n;
vvi queries;
vi arr;

// define functions here

int read_input() {
    int m;
    cin >> n >> m;
    string str;
    cin >> str;
    arr.resize(n);
    for (int i: range(n)) {
        arr[i] = str[i] - 'a';
    }
    queries.clear();
    for (int i: range(m)) {
        int t;
        cin >> t;
        int l, r, x;
        if (t == 1) {
            cin >> l >> r >> x;
            queries.push_back({1, l, r, x});
        } else {
            cin >> l >> r;
            queries.push_back({2, l, r});
        }
    }
    return 0;
}

int sum_26(int a, int b) { return (a + b) % ('z' - 'a' + 1); }

int e_0() { return 0; }

auto solve() {
    /**
     * main logic goes here
     **/
    set<int> st;
    SegTree<int, sum_26, e_0, sum_26> sg(arr);
    for (int i: range(n)) {
        vi indices;
        for (int delta: range(-2, +3)) {
            indices.push_back(2 * i + delta);
        }
        for (int idx: indices) {
            int le = idx >> 1;
            int ri = idx - le;
            if (le == ri) {
                le--;
                ri++;
            }
            if (le >= 0 && ri < n && arr[le] == arr[ri]) {
                st.insert(idx);
            }
        }
    }
    vector<char> ans;
    for (auto &v: queries) {
        if (v[0] == 1) {
            int le = v[1] - 1;
            int ri = v[2] - 1;
            int x = v[3];
            vi indices;
            for (int delta: range(-2, +3)) {
                indices.push_back(2 * le + delta);
                indices.push_back(2 * ri + delta);
            }
            for (int idx: indices) {
                if (st.find(idx) != st.end())
                    st.erase(idx);
            }
            sg.update(x, le, ri);
            for (int idx: indices) {
                int le = idx >> 1;
                int ri = idx - le;
                if (le == ri) {
                    le--;
                    ri++;
                }
                if (le >= 0 && ri < n && sg.get(le) == sg.get(ri)) {
                    st.insert(idx);
                }
            }
        } else {
            // #2
            int le = v[1] - 1;
            int ri = v[2] - 1;
            auto itr = st.lower_bound(2 * le + 1);
            bool cur_ans = true;
            if (itr != st.end() && *itr < 2 * ri) {
                cur_ans = false;
            }
            ans.push_back(cur_ans);
        }
    }
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    for (char t: ans) {
        cout << (t ? "YES" : "NO") << endl;
    }
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = true;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
