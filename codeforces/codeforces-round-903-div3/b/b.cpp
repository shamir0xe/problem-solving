#include <bits/stdc++.h>
using namespace std;

/**
 * problem B (2/7)
 * codeforces, codeforces-round-903-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<long long> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

// define variables here
#define MAX_M 15
ll a, b, c;

// define functions here

int read_input() {
    cin >> a >> b >> c;
    return 0;
}

vi make_cut(vi arr, int cuts) {
    ll ss = (a + b + c);
    if (ss % cuts != 0) return {};
    ll piece = ss / cuts;
    bool did = true;
    int cut = cuts - 3;
    while (cut > 0 && did) {
        int i = 0;
        did = false;
        while (i < sz(arr) && cut) {
            if (arr[i] > piece) {
                did = true;
                arr.push_back(piece);
                if (arr[i] - piece != 0)
                    arr.push_back(arr[i] - piece);
                cut--;
                arr.erase(arr.begin() + i);
            }
            i++;
        }
    }
    return arr;
}

bool good_cut(vi arr, int cuts) {
    if (sz(arr) == 0) return false;
    for (int i: range(1, sz(arr))) {
        if (arr[i] != arr[i - 1]) return false;
    }
    return true;
}


auto solve() {
    /**
     * main logic goes here
     **/
    for (int cut: range(3, 7)) {
        vi array = make_cut({a, b, c}, cut);
        // trace(array);
        if (good_cut(array, cut)) return "YES";
    }
    return "NO";
}

int second_main() {
    read_input();
    auto ans = solve();
    cout << ans << endl;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = true;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}


// YES
// YES
// NO
// NO
// YES
// YES
// NO
// YES
// NO
// NO
// YES
// YES
// NO
// YES
// NO
