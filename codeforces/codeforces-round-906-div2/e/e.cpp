#include <bits/stdc++.h>
#include <functional>

/**
 * problem E (5/6)
 * codeforces, codeforces-round-906-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n, m, k;
std::vector<std::tuple<int, int, int>> events;

/**
 * define functions here
 **/
int read_input() {
    std::cin >> n >> m >> k;
    events.clear();
    for (int i: range(m)) {
        int l, r;
        std::cin >> l >> r;
        events.emplace_back(l - 1, 1, i);
        events.emplace_back(r, 0, i);
    }
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    std::map<int, int> mp0;
    std::map<pii, int> mp1;
    std::set<int> current;
    for (int i: range(n)) {
        events.emplace_back(i, 2, -1);
    }
    sort(all(events));
    int constant = 0;
    for (auto &[idx, type, interval_idx]: events) {
        if (type == 1) {
            current.insert(interval_idx);
        } else if (type == 0) {
            current.erase(current.find(interval_idx));
        } else {
            // normal index
            if (sz(current) == 0) {
                constant++;
                continue;
            }
            if (sz(current) > 2) {
                continue;
            }
            if (sz(current) == 1) {
                int idx = *current.begin();
                mp0[idx]++;
                continue;
            }
            // sz == 2
            auto itr = current.begin();
            int idx1 = *itr++;
            int idx2 = *itr++;
            mp1[{idx1, idx2}]++;
        }
    }
    int ans = 0;
    for (auto &itr: mp1) {
        int i = itr.first.first;
        int j = itr.first.second;
        int cnt = itr.second;
        smax(ans, cnt + mp0[i] + mp0[j]);
    }
    vi best2(3, 0);
    for (auto &itr: mp0) {
        best2[2] = itr.second;
        std::sort(all(best2), [&](int i, int j) { return i > j; });
    }
    smax(ans, best2[0] + best2[1]);
    return ans + constant;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
