#include <algorithm>
#include <bits/stdc++.h>
#include <functional>
#include <iterator>
#include <limits>
#include <random>

/**
 * problem G (7/7)
 * codeforces, codeforces-round-916-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

template <typename T> class FenwickTree {
  private:
    std::vector<T> tree;
    int n;

  public:
    FenwickTree(int n) {
        this->n = n + 1;
        tree.assign(n + 1, 0);
    }

    T query(int idx) {
        // trace("query");
        if (idx < 0 || idx >= n - 1) {
            return 0;
        }
        T res = 0;
        idx++;
        while (idx > 0) {
            res += tree[idx];
            idx -= idx & -idx;
        }
        return res;
    }

    void update(int idx, T value) {
        // trace("update");
        if (idx < 0 || idx >= n - 1) {
            return;
        }
        idx++;
        while (idx < n) {
            tree[idx] += value;
            idx += idx & -idx;
        }
    }

    T get(int idx) { return query(idx) - query(idx - 1); }
};
/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    vi c = Reader::vector<int>(n << 1);
    std::for_each(all(c), [](int &ci) { ci--; });
    std::random_device rd;
    std::mt19937_64 gen(rd());
    std::uniform_int_distribution<ll> distribution(
        0, std::numeric_limits<ll>::max());
    vl map;
    vi temp = range(n);
    std::transform(all(temp), std::back_inserter(map),
                   [&](int i) { return distribution(gen); });
    // trace(n _ map);
    FenwickTree<int> fw(n << 1);
    auto blacken = [&](int i, int j) {
        // trace("blackening" _ i _ j);
        fw.update(i, -1);
        fw.update(j + 1, +1);
        // for (int k: range(i, j + 1)) {
            // trace(fw.query(k));
        // }
    };
    int begin = 0;
    std::map<ll, int> prefix;
    ll cur = 0;
    std::set<int> set;
    fw.update(0, 1);
    for (int i: range(n << 1)) {
        cur ^= map[c[i]];
        if (set.find(c[i]) == set.end()) {
            set.insert(c[i]);
        } else {
            set.erase(set.find(c[i]));
        }
        if (prefix.find(cur) != prefix.end()) {
            int last_idx = prefix[cur];
            if (!set.empty()) {
                blacken(last_idx + 1, i);
            }
        }
        prefix[cur] = i;
    }
    const int mod = 998244353;
    auto mul = [&](int a, int b) -> int { return (1ll * a * b) % mod; };
    cur = 0;
    int cnt = 0;
    int ans = 1;
    int cmp = 0;
    for (int i: range(n << 1)) {
        if (fw.query(i) == 1) {
            // trace(i + 1 _ c[i] + 1);
            cnt++;
            cur ^= map[c[i]];
            if (cur == 0) {
                ans = mul(ans, cnt);
                cmp++;
                cnt = 0;
            }
        }
    }
    return pii{cmp, ans};
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << ans.first << ' ' << ans.second << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
