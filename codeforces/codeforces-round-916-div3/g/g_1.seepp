#include <algorithm>
#include <bits/stdc++.h>
#include <functional>

/**
 * problem G (7/7)
 * codeforces, codeforces-round-916-div3
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    vi c = Reader::vector<int>(n << 1);
    std::for_each(all(c), [](int &ci) { ci--; });
    vi pair(n, -1);
    vi left(n);
    for (int i: range(n << 1)) {
        if (pair[c[i]] == -1) {
            pair[c[i]]--;
            left[c[i]] = i;
        } else {
            pair[c[i]] = i;
        }
    }
    // trace(c _ pair);
    std::vector<pii> st;
    for (int i: range(n << 1)) {
        if (i == pair[c[i]]) {
            // end of the interval
            continue;
        }
        pii cur = {c[i], pair[c[i]]};
        // trace(cur);
        if (st.empty() || st.back().second < i) {
            st.push_back(cur);
        } else {
            pii &back = st.back();
            smax(back.second, cur.second, [&]() {});
        }
    }
    const int mod = 998244353;
    auto add = [&](int a, int b) -> int { return (a + b) % mod; };
    auto mul = [&](int a, int b) -> int { return (1ll * a * b) % mod; };
    vvi adj(n);
    auto condition = [&](int i, int j) {
        return (left[i] < left[j] && pair[i] > left[j] && pair[i] < pair[j]) ||
               (left[j] < left[i] && pair[j] > left[i] && pair[j] < pair[i]);
    };
    for (int i: range(n)) {
        for (int j: range(i + 1, n)) {
            if (condition(i, j)) {
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }
    vi color(n);
    std::function<int(int)> dfs = [&](int u) {
        int res = 1;
        color[u]++;
        for (int v: adj[u]) {
            if (color[v] == 0) {
                res += dfs(v);
            }
        }
        return res;
    };
    int ans = 1;
    for (pii interval: st) {
        ans = mul(ans, dfs(interval.first) << 1);
    }
    return pii{sz(st), ans};
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << ans.first << ' ' << ans.second << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
