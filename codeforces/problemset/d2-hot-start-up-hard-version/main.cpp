#include <bits/stdc++.h>

/**
 * problem d2-hot-start-up-hard-version (1/1)
 * codeforces, problemset
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define range(i, n) for (int i = 0; i < n; ++i)
#define rrange(i, n) for (int i = n - 1; i >= 0; --i)
#define fr(i, a, n) for (int i = a; i < n; ++i)
#define rfr(i, a, n) for (int i = n - 1; i >= a; --i)
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * Reader class
 **/
class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    template <typename T, size_t n> static std::array<T, n> array() {
        std::array<T, n> res;
        range(i, n) { res[i] = Reader::primitive<T>(); }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    int k;
    std::cin >> n >> k;
    vi works = Reader::vector<int>(n);
    range(i, sz(works)) { works[i]--; }
    vi c = Reader::vector<int>(k);
    vi h = Reader::vector<int>(k);
    vi ri(n + 1, n);
    vi indices(k, n);
    rrange(i, n) {
        ri[i] = indices[works[i]];
        indices[works[i]] = i;
    }
    vl sum(n, 0);
    sum[0] = c[works[0]];
    fr(i, 1, n) {
        sum[i] = sum[i - 1];
        if (works[i] == works[i - 1]) {
            sum[i] += h[works[i]];
        } else {
            sum[i] += c[works[i]];
        }
    }
    auto calc = [&](int left, int right) -> ll {
        if (right < left) {
            return 0;
        }
        ll res = sum[right];
        if (left - 1 >= 0) {
            res -= sum[left - 1];
            if (works[left - 1] == works[left]) {
                res = res - h[works[left]] + c[works[left]];
            }
            if (left - 2 >= 0 && works[left] == works[left - 2]) {
                res = res - c[works[left]] + h[works[left]];
            }
        }
        return res;
    };
    vl dp(n + 1, 1e18);
    dp[0] = c[works[0]];
    ll flat = 0;
    fr(i, 1, n) {
        if (i - 2 >= 0) {
            flat += works[i - 2] == works[i - 1] ? h[works[i - 1]]
                                                 : c[works[i - 1]];
        }
        smin(dp[i], dp[0] + flat + c[works[i]]);
        smin(dp[i], sum[i]);
    }
    range(i, n) {
        // trace(i _ dp[i]);
        if (ri[i] < n) {
            smin(dp[ri[i]], dp[i] + calc(i + 1, ri[i] - 1) + h[works[i]]);
            // trace(ri[i] _ dp[ri[i]] _ calc(i + 1, ri[i] - 1) _ h[works[i]]);
        }
        if (i + 1 < n) {
            smin(dp[i + 1], dp[i] + calc(i + 1, i + 1));
        }
    }
    return dp[n - 1];
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
