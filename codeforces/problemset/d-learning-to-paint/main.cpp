#include <bits/stdc++.h>
#include <set>

/**
 * problem d-learning-to-paint (1/1)
 * codeforces, problemset
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    template <typename T, size_t n> static std::array<T, n> array() {
        std::array<T, n> res;
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n, k;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n >> k;
    vvi arr(n, vi(n));
    for (int i: range(n)) {
        for (int j: range(i, n)) {
            arr[i][j] = Reader::primitive<int>();
        }
    }
    vvi dp(n + 1, vi());
    for (int i: range(n)) {
        std::multiset<std::tuple<int, int, int>,
                      std::greater<std::tuple<int, int, int>>>
            cur_set;
        for (int j: range(i + 1)) {
            int idx = j - 2;
            if (idx < 0) {
                // the arr[j][i] without proceeding
                cur_set.emplace(arr[j][i], -1, -1);
            } else {
                // we can have another set to append arr[j][i] to
                cur_set.emplace(arr[j][i] + dp[idx][0], idx, 0);
            }
        }
        if (i - 1 >= 0) {
            // we don't select current a's
            cur_set.emplace(dp[i - 1][0], i - 1, 0);
        } else {
            // the empty set, we calculate it once (i == 1)
            cur_set.emplace(0, -1, -1);
        }

        while (sz(cur_set) > 0 && sz(dp[i]) < k) {
            auto [updated_value, idx, itr] = *cur_set.begin();
            cur_set.erase(cur_set.begin());
            if (idx < 0) {
                dp[i].push_back(updated_value);
                continue;
            }
            int value = updated_value - dp[idx][itr];
            dp[i].push_back(updated_value);
            itr++;
            if (itr < sz(dp[idx])) {
                cur_set.emplace(dp[idx][itr] + value, idx, itr);
            }
        }
    }
    return dp[n - 1];
}

int second_main() {
    auto ans = solve();
    for (int i: range(sz(ans))) {
        std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    }
    // std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
