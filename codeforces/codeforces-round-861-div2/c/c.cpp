#include <bits/stdc++.h>

/**
 * problem C (3/5)
 * codeforces, codeforces-round-861-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int lowest, highest;

/**
 * define functions here
 **/
int read_input() {
    std::cin >> lowest >> highest;
    return 0;
}

vi int_to_arr(int n, int num) {
    vi res(n, 0);
    int idx = n - 1;
    while (num != 0) {
        res[idx--] = num % 10;
        num /= 10;
    }
    return res;
}

pii solve(int le, int hi) {
    int n = 20;
    vi arr = int_to_arr(n, lowest);
    vi brr = int_to_arr(n, highest);
    // trace(arr _ brr);
    std::vector<std::vector<std::vector<int>>> dp(n + 1, vvi(2, vi(2, 0)));
    std::vector<std::vector<std::vector<std::tuple<int, int, int, int>>>> par(
        n + 1, std::vector<std::vector<std::tuple<int, int, int, int>>>(
                   2, std::vector<std::tuple<int, int, int, int>>(
                          2, {-1, -1, -1, -1})));
    for (int gr: range(2)) {
        for (int lw: range(2)) {
            dp[n][gr][lw] = 1;
        }
    }
    trace(le _ hi);
    for (int i: rrange(n)) {
        for (int gr: range(2)) {
            for (int lw: range(2)) {
                for (int j: range(le, hi + 1)) {
                    if (!gr && j < arr[i]) {
                        continue;
                    }
                    if (!lw && j > brr[i]) {
                        continue;
                    }
                    int &res = dp[i][gr][lw];
                    auto &papa = par[i][gr][lw];
                    smax(res, dp[i][0][lw], [&]() { papa = {i, 0, lw, -1}; });
                    smax(res, dp[i][gr][0], [&]() { papa = {i, gr, 0, -1}; });
                    smax(res, dp[i][0][0], [&]() { papa = {i, 0, 0, -1}; });
                    int grn = gr | (j > arr[i]);
                    int lwn = lw | (j < brr[i]);
                    smax(res, dp[i][grn][lwn], [&]() {
                        papa = {i + 1, grn, lwn, j};
                    });
                }
            }
        }
    }
    if (!dp[0][0][0]) {
        return {0, 0};
    }
    int number = 0;
    int i = 0;
    int gw = 0;
    int lw = 0;
    while (i < n) {
        auto [j, gwn, lwn, digit] = par[i][gw][lw];
        if (j != i) {
            number = number * 10 + digit;
        }
        i = j;
        gw = gwn;
        lw = lwn;
    }
    return {1, number};
}

auto solve() {
    /**
     * main logic goes here
     **/
    for (int length: range(10)) {
        for (int i: range(10)) {
            auto [can, number] = solve(i, std::min(i + length, 9));
            if (can) {
                return number;
            }
        }
    }
    return -1;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
