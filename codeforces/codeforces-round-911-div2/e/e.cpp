#include <bits/stdc++.h>

/**
 * problem E (5/6)
 * codeforces, codeforces-round-911-div2
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;
vvi adj;
vi papas, colors, times, length;
vl sum;
std::vector<std::set<int>> comp_adj;
std::vector<std::pair<int, ll>> dp;

/**
 * define functions here
 **/

int find_par(int u) {
    if (papas[u] == u) {
        return u;
    }
    return papas[u] = find_par(papas[u]);
}

int merge(int u, int v) {
    u = find_par(u);
    v = find_par(v);
    if (u == v) {
        return u;
    }
    if (u > v) {
        std::swap(u, v);
    }
    return papas[v] = u;
}

void dfs(int u, int &time) {
    colors[u] = 1;
    times[u] = time++;
    for (int v: adj[u]) {
        int jad_u = find_par(u);
        int jad_v = find_par(v);
        int best = std::min(times[jad_v], times[jad_u]);
        if (colors[v] == 0) {
            dfs(v, time);
            jad_v = find_par(v);
            jad_u = find_par(u);
            best = std::min(times[jad_v], times[jad_u]);
            if (times[jad_v] < times[jad_u]) {
                // merge
                times[merge(jad_u, jad_v)] = best;
            }
        } else if (colors[v] == 1) {
            if (times[jad_v] < times[jad_u]) {
                // merge
                times[merge(jad_u, jad_v)] = best;
            }
        }
    }
    colors[u] = 2;
}

std::pair<int, ll> dfs2(int u) {
    std::pair<int, ll> &res = dp[u];

    if (res.first != -1) {
        return res;
    }
    if (colors[u] == 1) {
        while (true)
            ;
    }
    colors[u] = 1;
    std::pair<int, ll> bigg = {0, 0};
    for (int v: comp_adj[u]) {
        std::pair<int, ll> temp = dfs2(v);
        if (bigg.first < temp.first ||
            (bigg.first == temp.first && bigg.second > temp.second)) {
            bigg = temp;
        }
    }
    res = {length[u] + bigg.first, sum[u] + bigg.second};
    return res;
}

auto solve() {
    /**
     * main logic goes here
     **/
    int m;
    std::cin >> n >> m;
    vi a = Reader::vector<int>(n);
    adj = vvi(n, vi());
    times = vi(n, 0);
    for (int i: range(m)) {
        int u, v;
        std::cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
    }
    colors = vi(n, 0);
    // init
    papas = range(n);
    int entry_time = 0;
    for (int u: range(n)) {
        if (colors[u] == 0) {
            dfs(u, entry_time);
        }
    }
    std::map<int, int> comp_ids;
    for (int u: range(n)) {
        int jad_u = find_par(u);
        if (comp_ids.find(jad_u) == comp_ids.end()) {
            comp_ids[jad_u] = sz(comp_ids);
        }
    }
    int comp_cnts = sz(comp_ids);
    comp_adj = std::vector<std::set<int>>(comp_cnts, std::set<int>());
    sum = vl(comp_cnts, 0);
    length = vi(comp_cnts, 0);
    for (int u: range(n)) {
        int jad_u = find_par(u);
        length[comp_ids[jad_u]]++;
        sum[comp_ids[jad_u]] += a[u];
        for (int v: adj[u]) {
            int jad_v = find_par(v);
            if (jad_u != jad_v) {
                comp_adj[comp_ids[jad_u]].insert(comp_ids[jad_v]);
            }
        }
    }
    dp = std::vector<std::pair<int, ll>>(comp_cnts, std::pair<int, ll>{-1, -1});
    colors = vi(comp_cnts, 0);
    std::pair<int, ll> ans = {-1, -1};
    for (int u: range(comp_cnts)) {
        if (dp[u].first == -1) {
            std::pair<int, ll> res = dfs2(u);
            if (res.first > ans.first ||
                (res.first == ans.first && res.second < ans.second)) {
                ans = res;
            }
        }
    }
    return ans;
}

int second_main() {
    auto ans = solve();
    // for (int i: range(sz(ans))) {
    //     std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    // }
    std::cout << ans.first << ' ' << ans.second << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = true;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
