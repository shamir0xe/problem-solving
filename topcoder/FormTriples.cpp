#include <bits/stdc++.h>

/**
 * problem {} ({}/{})
 * {}, {}
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup){};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> n;
    int ans = 0;

    return ans;
}

void possibilitis(int i, int j, int k, int N, vvi &res) {
    if (k == N) {
        return possibilitis(i, j + 1, 0, N, res);
    } else if (j == N) {
        return possibilitis(i + 1, 0, 0, N, res);
    } else if (i == N) {
        return;
    }
    if (i != j && i != k && j != k) {
        res.push_back(vi{i, j, k});
    }
    return possibilitis(i, j, k + 1, N, res);
}

class FormTriples {
  public:
    std::string solve(int N, std::vector<int> C) {
        vvi all_permutation;
        std::map<char, int> inbox;
        for (int i: range(sz(C))) {
            inbox[i + '0'] = C[i];
            inbox[i + 'a'] = C[i];
            inbox[i + 'A'] = C[i];
        }
        possibilitis(0, 0, 0, N, all_permutation);
        // trace(all_permutation);
        std::string ans;
        for (auto perm: all_permutation) {
            while (inbox[perm[0] + '0'] && inbox[perm[1] + 'a'] &&
                   inbox[perm[2] + 'A']) {
                // trace(perm);
                ans += std::string(1, perm[0] + '0') +
                       std::string(1, perm[1] + 'a') +
                       std::string(1, perm[2] + 'A');
                // trace(ans);
                inbox[perm[0] + '0']--;
                inbox[perm[1] + 'a']--;
                inbox[perm[2] + 'A']--;
            }
        }
        return ans;
    }
};

// BEGIN CUT HERE
#include <cstdio>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
namespace moj_harness {
using std::string;
using std::vector;
int run_test_case(int);
void run_test(int casenum = -1, bool quiet = false) {
    if (casenum != -1) {
        if (run_test_case(casenum) == -1 && !quiet) {
            std::cerr << "Illegal input! Test case " << casenum
                      << " does not exist." << std::endl;
        }
        return;
    }

    int correct = 0, total = 0;
    for (int i = 0;; ++i) {
        int x = run_test_case(i);
        if (x == -1) {
            if (i >= 100) {
                break;
            }
            continue;
        }
        correct += x;
        ++total;
    }

    if (total == 0) {
        std::cerr << "No test cases run." << std::endl;
    } else if (correct < total) {
        std::cerr << "Some cases FAILED (passed " << correct << " of " << total
                  << ")." << std::endl;
    } else {
        std::cerr << "All " << total << " tests passed!" << std::endl;
    }
}

int verify_case(int casenum, const string &expected, const string &received,
                std::clock_t elapsed) {
    std::cerr << "Example " << casenum << "... ";

    string verdict;
    vector<string> info;
    char buf[100];

    if (elapsed > CLOCKS_PER_SEC / 200) {
        std::sprintf(buf, "time %.2fs", elapsed * (1.0 / CLOCKS_PER_SEC));
        info.push_back(buf);
    }

    if (expected == received) {
        verdict = "PASSED";
    } else {
        verdict = "FAILED";
    }

    std::cerr << verdict;
    if (!info.empty()) {
        std::cerr << " (";
        for (size_t i = 0; i < info.size(); ++i) {
            if (i > 0) {
                std::cerr << ", ";
            }
            std::cerr << info[i];
        }
        std::cerr << ")";
    }
    std::cerr << std::endl;

    if (verdict == "FAILED") {
        std::cerr << "    Expected: \"" << expected << "\"" << std::endl;
        std::cerr << "    Received: \"" << received << "\"" << std::endl;
    }

    return verdict == "PASSED";
}

int run_test_case(int casenum__) {
    switch (casenum__) {
    case 0: {
        int N = 2;
        int C[] = {2, 3};
        string expected__ = "";

        std::clock_t start__ = std::clock();
        string received__ = FormTriples().solve(
            N, vector<int>(C, C + (sizeof C / sizeof C[0])));
        return verify_case(casenum__, expected__, received__,
                           clock() - start__);
    }
    case 1: {
        int N = 3;
        int C[] = {1, 1, 1};
        string expected__ = "0bC1cA2aB";

        std::clock_t start__ = std::clock();
        string received__ = FormTriples().solve(
            N, vector<int>(C, C + (sizeof C / sizeof C[0])));
        return verify_case(casenum__, expected__, received__,
                           clock() - start__);
    }
    case 2: {
        int N = 4;
        int C[] = {3, 12, 1, 4};
        string expected__ = "";

        std::clock_t start__ = std::clock();
        string received__ = FormTriples().solve(
            N, vector<int>(C, C + (sizeof C / sizeof C[0])));
        return verify_case(casenum__, expected__, received__,
                           clock() - start__);
    }
    case 3: {
        int N = 4;
        int C[] = {2, 3, 3, 2};
        string expected__ = "2dA1cD1cA0bC2dB1cD2aB3bC0bC3aB";

        std::clock_t start__ = std::clock();
        string received__ = FormTriples().solve(
            N, vector<int>(C, C + (sizeof C / sizeof C[0])));
        return verify_case(casenum__, expected__, received__,
                           clock() - start__);
    }

        // custom cases

        /*      case 4: {
                                int N                     = ;
                                int C[]                   = ;
                                string expected__         = ;

                                std::clock_t start__      = std::clock();
                                string received__         =
           FormTriples().solve(N, vector <int>(C, C + (sizeof C / sizeof
           C[0]))); return verify_case(casenum__, expected__, received__,
           clock()-start__);
                        }*/
        /*      case 5: {
                                int N                     = ;
                                int C[]                   = ;
                                string expected__         = ;

                                std::clock_t start__      = std::clock();
                                string received__         =
           FormTriples().solve(N, vector <int>(C, C + (sizeof C / sizeof
           C[0]))); return verify_case(casenum__, expected__, received__,
           clock()-start__);
                        }*/
        /*      case 6: {
                                int N                     = ;
                                int C[]                   = ;
                                string expected__         = ;

                                std::clock_t start__      = std::clock();
                                string received__         =
           FormTriples().solve(N, vector <int>(C, C + (sizeof C / sizeof
           C[0]))); return verify_case(casenum__, expected__, received__,
           clock()-start__);
                        }*/
    default:
        return -1;
    }
}
} // namespace moj_harness

#include <cstdlib>
int main(int argc, char *argv[]) {
    if (argc == 1) {
        moj_harness::run_test();
    } else {
        for (int i = 1; i < argc; ++i) {
            moj_harness::run_test(std::atoi(argv[i]));
        }
    }
}
// END CUT HERE
