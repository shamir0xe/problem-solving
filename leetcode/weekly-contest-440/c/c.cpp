#include <bits/stdc++.h>
#include <functional>

/**
 * problem C (3/4)
 * leetcode, weekly-contest-440
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

template <typename T, typename K> class Node {
  public:
    std::pair<T, T> idx_range;
    K aggr_value;
    Node<T, K> *le, *ri;

    Node(std::pair<T, T> idx_range, K aggr_value) {
        this->idx_range = idx_range;
        this->aggr_value = aggr_value;
        this->le = NULL;
        this->ri = NULL;
    }
};

template <typename T, typename K> class SegmentTree {
  public:
    SegmentTree(std::vector<Node<T, K>> &nodes,
                std::function<bool(Node<T, K>, Node<T, K>)> cmp_fn,
                std::function<Node<T, K>(Node<T, K>, Node<T, K>)> aggr_fn) {
        this->cmp_fn = cmp_fn;
        this->aggr_fn = aggr_fn;
        this->root = this->initialize(nodes, 0, sz(nodes));
    };

  private:
    std::vector<Node<T, K>> nodes;
    Node<T, K> root;
    std::function<Node<T, K>(Node<T, K>, Node<T, K>)> aggr_fn;
    std::function<bool(Node<T, K>, Node<T, K>)> cmp_fn;

    Node<T, K> *initialize(std::vector<Node<T, K>> &nodes, int le, int ri) {
        if (le >= ri) {
            return NULL;
        }
        if (le == ri - 1) {
            // leaf
            this->nodes.push_back(nodes[le]);
            return this->nodes.rbegin();
        }
        int mid = (le + ri) >> 1;
        Node<T, K> *node_left = this->initialize(nodes, le, mid);
        Node<T, K> *node_right = this->initialize(nodes, mid, ri);
        this->nodes.push_back(
            Node<T, K>({le, ri}, this->aggr_fn(*node_left, *node_right))
                .aggr_value);
        return this->nodes.rbegin();
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

class Solution {
  public:
    int numOfUnplacedFruits(std::vector<int> &fruits,
                            std::vector<int> &baskets) {
        int res = 0;
        sort(all(fruits));
        std::vector<Node> nodes;
        for (int i: range(sz(baskets))) {
            nodes.push_back(Node(baskets[i], i));
        }
        sort(all(nodes), [](const Node &a, const Node &b) {
            // comparator fn
            return a.cmp_value < b.cmp_value;
        });
        auto sg = SegmentTree<Node>(
            nodes,
            [](const Node &a, const Node &b) {
                // comparator fn
                return a.cmp_value < b.cmp_value;
            },
            [](const Node &a, const Node &b) {
                // aggregator fn
                // it's min in this example
                if (b.aggr_value < a.aggr_value) {
                    return b;
                }
                return a;
            });
        for (int fruit: fruits) {
            Node *basket_node = sg.lower_bound(fruit);
            if (basket_node != NULL) {
                sg.remove(*basket_node);
            } else {
                res++;
            }
        }
        return res;
    }
};

int read_input() {
    std::cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    auto ans = solution.assert_yellow("Hello");
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
