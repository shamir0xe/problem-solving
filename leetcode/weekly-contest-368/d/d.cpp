#include <bits/stdc++.h>
using namespace std;

/**
 * problem D (4/4)
 * leetcode, weekly-contest-368
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cout << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = function<void(void)>>
void smin(
    T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = function<void(void)>>
void smax(
    T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi indices = range(idx, n);
    reverse(all(indices));
    return indices;
}
inline vi rrange(int n) { return rrange(0, n); }

// define variables here
#define MAX_M 15
int n;

// define functions here
bool pal(int i, int j, string &str) {
    while (str[i] == str[j]) {
        i++;
        j--;
        if (i >= j) return true;
    }
    return false;
}

int calc(int i, int j, string &str) {
    int res = 1e9;
    int n = j - i + 1;
    if (pal(i, j, str)) return 0;
    for (int t: range(1, n)) {
        if (n % t != 0)
            continue;
        int cur_ans = 0;
        for (int idx: range(i, i + t)) {
            int rev_idx = j + 1 - t + idx - i;
            //trace(idx _ rev_idx _ j _ t _ i);
            while (idx < rev_idx) {
                if (str[idx] != str[rev_idx])
                    cur_ans++;
                idx += t;
                rev_idx -= t;
            }
        }
        smin(res, cur_ans);
    }
    return res;
}

class Solution {
  public:
    int minimumChanges(string s, int k) {
        n = sz(s);
        vvi cnt(n, vi(n, 1e9));
        for (int i: range(n)) {
            for (int j: range(i + 1, n)) {
                cnt[i][j] = calc(i, j, s);
                //trace(i _ j _ cnt[i][j]);
            }
        }
        vvi dp(n + 1, vi(k + 1, 1e9));
        dp[n][0] = 0;
        for (int i: rrange(n)) {
            for (int t: range(1, k + 1)) {
                for (int j: range(i + 1, n)) {
                    if (cnt[i][j] < 1e8)
                        smin(dp[i][t], cnt[i][j] + dp[j + 1][t - 1]);
                }
            }
        }
        return dp[0][k];
    }
};



int read_input() {
    cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    auto ans = solution.assert_yellow("Hello");
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    cout << ans << endl;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = false;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
