#include <bits/stdc++.h>
using namespace std;

/**
 * problem 943-find-the-shortest-superstring (1/1)
 * leetcode, problemset
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cerr << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

// define variables here
#define MAX_N 1e9
int n;
vector<string> arr;
vvi adj;
vvi dp;
vector<vector<pii>> par;

// define functions here

void build_adj(int u, int v) {
    int length = sz(arr[v]);
    for (int i: range(sz(arr[u]))) {
        string temp = arr[u].substr(i, length);
        if (temp == arr[v].substr(0, sz(temp))) {
            adj[u][v] = i;
            return;
        }
    }
}

void set_min(int mask, int i, int j, int added) {
    int next_mask = mask | 1 << j;
    int &nx = dp[next_mask][j];
    int cur = dp[mask][i];
    if (cur + added < nx) {
        nx = cur + added;
        par[next_mask][j] = {mask, i};
    }
}

class Solution {
  public:
    string shortestSuperstring(vector<string> &words) {
        arr = words;
        n = sz(words);
        adj.assign(n, vi(n, -1));
        dp.assign(1 << n, vector<int>(n, MAX_N));
        par.assign(1 << n, vector<pii>(n, {-1, -1}));
        for (int i: range(n)) {
            for (int j: range(n)) {
                if (i == j)
                    continue;
                build_adj(i, j);
            }
        }
        trace("after making adj");
        for (int i: range(n)) {
            dp[1 << i][i] = sz(arr[i]);
            par[1 << i][i] = {0, -1};
        }
        for (int mask: range(1 << n)) {
            for (int i: range(n)) {
                if ((mask >> i & 1) == 0) {
                    continue;
                }
                // we have valid mask here
                for (int j: range(n)) {
                    if (mask >> j & 1) continue;
                    if (adj[i][j] != -1) {
                        int length = sz(arr[i]) - adj[i][j];
                        set_min(mask, i, j, max(0, sz(arr[j]) - length));
                    } else {
                        set_min(mask, i, j, sz(arr[j]));
                    }
                }
            }
        }
        string ans;
        pii best = {1e9, -1};
        int mask = (1 << n) - 1;
        for (int i: range(n)) {
            if (best.X > dp[mask][i]) {
                best = {dp[mask][i], i};
            }
        }
        trace(best);
        int idx = best.Y;
        while (mask != 0) {
            pii before = par[mask][idx];
            int length = dp[mask][idx];
            if (before.X > 0) length -= dp[before.X][before.Y];
            ans = arr[idx].substr(sz(arr[idx]) - length) + ans;
            mask = before.X;
            idx = before.Y;
        }
        return ans;
    }
};

int read_input() {
    int t;
    cin >> t;
    arr.resize(t);
    for (int i: range(t))
        cin >> arr[i];
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    auto ans = solution.shortestSuperstring(arr);
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    cout << ans << endl;
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    bool test_case = false;
    if (test_case) {
        int t;
        cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
