package main

import "fmt"

/**
 * problem 3677-count-binary-palindromic-numbers (1/1)
 * leetcode, problemset
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

func makeBinaryString(n int64) string {
	if n == 0 {
		return "0"
	}
	res := ""
	for ; n != 0; n /= 2 {
		res = string(rune(n%2)+rune('0')) + res
	}
	return res
}

func countBinaryPalindromes(n int64) int {
	nn := makeBinaryString(n)
	fmt.Println("nn", nn)
	t := len(nn) / 2
	odd := len(nn) % 2
	ans := 0
	for i := range(t) {
		if i == 0 || nn[i] == '0' {
			continue
		}
		if t - i - 1 + odd >= 0 {
			ans += 1 << (t - i - 1 + odd)
		}
	}

	extra := []rune{'0', '1'}
	ccur := 0
	mms := map[string]int{}
	for _, tt := range extra {
		mm := nn[:t]
		if len(nn)%2 == 1 {
			mm += string(tt)
		}
		for i := range t {
			mm += string(mm[t-i-1])
		}
		mms[mm] = 1
	}
	for mm := range mms {
		// fmt.Println("mm: ", mm)
		cur := 1
		for i := range len(nn) {
			if nn[i] < mm[i] {
				cur = 0
				break
			} else if nn[i] > mm[i] {
				break
			}
		}
		ccur += cur
	}
	// fmt.Println("ccur", ccur)

	f := make([]int, 55)
	f[0] = 0
	f[1] = 2
	for i := range 55 {
		if i < 2 {
			continue
		}
		f[i] = 1 << ((i - 2) / 2)
		if i%2 == 1 {
			f[i] <<= 1
		}
		f[i] += f[i-1]
	}
	fmt.Printf("ans, cur, f[nn - 1]: %d, %d, %d\n", ans, ccur, f[len(nn) - 1])
	return ccur + f[len(nn)-1] + ans
}

func main() {
	for i := range 22 {
		fmt.Printf("[%d]: %d\n", i, countBinaryPalindromes(int64(i)))
	}
}
