#include <bits/stdc++.h>
using namespace std;

/**
 * problem D (4/4)
 * leetcode, biweekly-contest-115
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<long long> vl;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
#define trace(x) cout << #x << " : " << x << endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename enable_if<(n >= sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup){};

template <size_t n, typename... T>
typename enable_if<(n < sizeof...(T))>::type
__tuple_printer(ostream &os, const tuple<T...> &tup) {
    if (n != 0)
        os << " ";
    os << get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first)
            first = false;
        else
            os << " ";
        os << (*ii);
    }
    os << "]";
    return os;
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx)
        return vi();
    vi indices(n - idx);
    for (int i = idx; i < n; ++i)
        indices[i - idx] = i;
    return indices;
}

inline vi range(int n) { return range(0, n); }

// define variables here
#define MAX_M 15
int n;
const int mod = 1000 * 1000 * 1000 + 7;

// define functions here
inline int add(int a, int b) { return (a + b) % mod; }

class Solution {
  public:
    int countSubMultisets(vector<int> &nums, int l, int r) {
        vvi dp(2, vi(r + 1, 0));
        map<int, int> mp;
        for (int t: nums) {
            mp[t]++;
        }
        int cur = 0;
        dp[0][0] = mp[0] + 1;
        trace(dp[0][0]);
        for (auto &[value, cnt]: mp) {
            dp[1 ^ cur] = dp[cur];
            for (int i = 0; i < value; ++i) {
                int plus = 0;
                for (int j = i; j < r + 1; j += value) {
                    if (j >= (cnt + 1) * value)
                        plus =
                            add(plus, add(mod, -dp[cur][j - (cnt + 1) * value]));
                    dp[1 ^ cur][j] = add(dp[1 ^ cur][j], plus);
                    //trace(i _ j _ plus);
                    plus = add(plus, dp[cur][j]);
                }
            }
            cur ^= 1;
        }
        int ans = 0;
        for (int i: range(l, r + 1)) {
            ans = add(ans, dp[cur][i]);
        }
        return ans;
    }
};
