#include <bits/stdc++.h>

/**
 * problem D (4/4)
 * leetcode, weekly-contest-444
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cout << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

class Solution {
  public:
    int minimumPairRemoval(vi &nums) {
        n = sz(nums);
        vi le(n, -1);
        vi ri(n, n);
        for (int i: range(n)) {
            le[i] = i - 1;
            ri[i] = i + 1;
        }
        std::set<std::pair<ll, int>> current;
        std::set<int> bads;
        std::vector<ll> sacks(n);
        for (int i: range(n)) {
            sacks[i] = nums[i];
        }
        for (int i: range(n - 1)) {
            current.insert(std::pair{nums[i] + nums[i + 1], i});
            if (nums[i] > nums[i + 1]) {
                bads.insert(i);
            }
        }
        int cnt = 0;
        while (!bads.empty()) {
            auto [s, idx] = *current.begin();

            // trace(idx _ le[idx] _ ri[idx]);

            // remove bads, remove current states
            current.erase(current.begin());
            if (bads.find(idx) != bads.end()) {
                bads.erase(bads.find(idx));
            }
            if (le[idx] >= 0) {
                if (bads.find(le[idx]) != bads.end()) {
                    bads.erase(bads.find(le[idx]));
                }
                current.erase(std::pair{sacks[le[idx]] + sacks[idx], le[idx]});
            }
            if (bads.find(ri[idx]) != bads.end()) {
                bads.erase(bads.find(ri[idx]));
            }

            // merge
            if (ri[idx] < n) {
                if (ri[ri[idx]] < n) {
                    current.erase(std::pair{sacks[ri[idx]] + sacks[ri[ri[idx]]],
                                            ri[idx]});
                }
                ri[idx] = ri[ri[idx]];
                if (ri[idx] < n) {
                    le[ri[idx]] = idx;
                }
            }

            // udpate
            sacks[idx] = s;
            if (ri[idx] < n) {
                current.insert(std::pair{sacks[idx] + sacks[ri[idx]], idx});
                if (sacks[idx] > sacks[ri[idx]]) {
                    bads.insert(idx);
                }
            }
            if (le[idx] >= 0) {
                current.insert(std::pair{sacks[le[idx]] + sacks[idx], le[idx]});
                if (sacks[le[idx]] > sacks[idx]) {
                    bads.insert(le[idx]);
                }
            }
            cnt++;
        }
        return cnt;
    }
};

int read_input() {
    std::cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    vi nums{2, 2, -1, 3, -2, 2, 1, 1, 1, 0, -1};
    auto ans = solution.minimumPairRemoval(nums);
    return ans;
}

int second_main() {
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
