#include <algorithm>
#include <bits/stdc++.h>
#include <deque>
#include <functional>
#include <unordered_set>

/**
 * problem B (2/4)
 * leetcode, weekly-contest-444
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cout << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/

class Router {
  public:
    Router(int memoryLimit) : memory_limit(memoryLimit) {
        q = std::deque<std::tuple<int, int, int>>();
        set = std::unordered_set<std::string>();
        mp = std::map<int, std::deque<pii>>();
    }

    bool addPacket(int source, int destination, int timestamp) {
        // add first, check for duplicate
        std::string hash = make_hash(source, destination, timestamp);
        if (set.find(hash) != set.end()) {
            return false;
        }
        set.insert(hash);
        q.push_back(std::tuple{source, destination, timestamp});
        mp[destination].push_back(pii{timestamp, source});

        // check the size of the q
        if (sz(q) > memory_limit) {
            auto [s, d, t] = q.front();
            clear(s, d, t);
            q.pop_front();
        }
        return true;
    }

    vi forwardPacket() {
        if (sz(q) == 0) {
            return vi();
        }
        auto [source, destination, timestamp] = q.front();
        q.pop_front();
        clear(source, destination, timestamp);
        return vi{source, destination, timestamp};
    }

    int getCount(int destination, int startTime, int endTime) {
        auto first = std::lower_bound(all(mp[destination]), pii{startTime, -1});
        auto second =
            std::lower_bound(all(mp[destination]), pii{endTime + 1, -1});
        return second - first;
    }

  private:
    void clear(int s, int d, int t) {
        set.erase(make_hash(s, d, t));
        mp[d].pop_front();
    }
    std::string to_str(int t) {
        std::string res = "";
        while (t) {
            res += t % 10 + '0';
            t /= 10;
        }
        std::reverse(all(res));
        return res;
    }
    std::string make_hash(int s, int d, int t) {
        return to_str(s) + "|" + to_str(d) + "|" + to_str(t);
    }
    int memory_limit;
    std::unordered_set<std::string> set;
    std::deque<std::tuple<int, int, int>> q;
    std::map<int, std::deque<pii>> mp;
};

/**
 * Your Router object will be instantiated and called as such:
 * Router* obj = new Router(memoryLimit);
 * bool param_1 = obj->addPacket(source,destination,timestamp);
 * vector<int> param_2 = obj->forwardPacket();
 * int param_3 = obj->getCount(destination,startTime,endTime);
 */Â©leetcode

int read_input() {
    std::cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    auto ans = solution.assert_yellow("Hello");
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
