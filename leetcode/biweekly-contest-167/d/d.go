package main

import "fmt"

/**
 * problem D (4/4)
 * leetcode, biweekly-contest-167
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

func maxPartitionFactor(points [][]int) int {
	n := len(points)
	if n <= 2 {
		return 0
	}
	dis := make([][]int, n)
	abs := func(t int) int {
		if t < 0 {
			return -t
		}
		return t
	}
	s, e := int(1e9), 0
	for i := range n {
		dis[i] = make([]int, n)
		for j := range n {
			dis[i][j] = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1])
			s = min(s, dis[i][j])
			e = max(e, dis[i][j])
		}
	}

	colors := make([]int, n)
	curColor := 0
	for i := range n {
		colors[i] = curColor
	}

	var dfs func(u, length, cur int) bool
	dfs = func(u, length, cur int) bool {
		colors[u] = curColor - cur
		for v := range n {
			if v == u {
				continue
			}
			alterColor := curColor - (1 - cur)
			if dis[u][v] >= length {
				continue
			}
			if colors[v] == alterColor {
				continue
			}
			if colors[v] == curColor {
				return false
			}

			res := dfs(v, length, 1-cur)
			// fmt.Printf("%d -> %d | result: %v\n", u+1, v+1, res)
			if !res {
				return false
			}
		}
		return true
	}

	can := func(length int) bool {
		curColor += 2
		for i := range n {
			if colors[i] <= curColor-2 {
				res := dfs(i, length, 0)
				if !res {
					return false
				}
			}
		}
		return true
	}

	for e-s > 1 {
		m := (e + s) >> 1
		// fmt.Printf("(%d, %d), m %d\n", s, e, m)
		if can(m) {
			s = m
		} else {
			e = m
		}
	}
	if can(e) {
		return e
	}
	return s
}

func main() {
	fmt.Println("Hello world!")
}
