package main

import "fmt"

/**
 * problem C (3/4)
 * leetcode, biweekly-contest-167
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

type FenwickTree struct {
	data []int64
}

func NewFenwickTree(size int) *FenwickTree {
	return &FenwickTree{
		data: make([]int64, size+1),
	}
}

func (ft *FenwickTree) Update(index int, value int) {
	index++ // 1-based index
	for index < len(ft.data) {
		ft.data[index] += int64(value)
		index += index & -index // Add the last set bit
	}
}

func (ft *FenwickTree) Query(index int) int64 {
	index++ // 1-based index
	var sum int64 = 0
	for index > 0 {
		sum += ft.data[index]
		index -= index & -index // Subtract the last set bit
	}
	return sum
}

// QueryRange returns the sum of the elements in a given range [start, end].
func (ft *FenwickTree) QueryRange(start, end int) int64 {
	if start > end {
		return 0
	}
	if start == 0 {
		return ft.Query(end)
	}
	return ft.Query(end) - ft.Query(start-1)
}

var (
	maxn = 100000 + 10
)

type ExamTracker struct {
	times        []int
	inverseTimes map[int]int
	fenwickTree  *FenwickTree
}

func Constructor() ExamTracker {
	tracker := ExamTracker{}
	tracker.fenwickTree = NewFenwickTree(maxn)
	tracker.inverseTimes = make(map[int]int)
	return tracker
}

func (this *ExamTracker) Record(time int, score int) {
	this.times = append(this.times, time)
	this.inverseTimes[time] = len(this.times) - 1
	this.fenwickTree.Update(this.inverseTimes[time], score)
}

func (this *ExamTracker) findIdx(time int) int {
	s, e := 0, len(this.inverseTimes)
	// the last idx which is <= time
	for e-s > 1 {
		m := (e + s) >> 1
		if this.times[m] <= time {
			s = m
		} else {
			e = m
		}
	}
	if this.times[s] <= time {
		return s
	}
	return -1
}

func (this *ExamTracker) TotalScore(startTime int, endTime int) int64 {
	i1 := this.findIdx(startTime)
	if i1 == -1 || this.times[i1] < startTime {
		i1++
	}
	i2 := this.findIdx(endTime)

	fmt.Printf("s, e: (%d, %d)\n", startTime, endTime)
	fmt.Printf("i1, i2: (%d, %d)\n", i1, i2)
	return this.fenwickTree.QueryRange(i1, i2)
}

/**
 * Your ExamTracker object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Record(time,score);
 * param_2 := obj.TotalScore(startTime,endTime);
 */

func main() {
	fmt.Println("Hello world!")
}
