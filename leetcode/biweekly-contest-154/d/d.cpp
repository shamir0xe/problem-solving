#include <bits/stdc++.h>

/**
 * problem D (4/4)
 * leetcode, biweekly-contest-154
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cout << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;

/**
 * define functions here
 **/

template <class T> class FenwickTree {
  public:
    FenwickTree(int n) : n(n), tree(n, 0) {}
    void update(int p, T value) {
        assert(0 <= p && p < n);
        p++;
        while (p <= n) {
            tree[p - 1] += value;
            p += p & -p;
        }
    }

    T sum(int le, int ri) {
        assert(0 <= le && le <= ri && ri <= n);
        return sum(ri) - sum(le);
    }

  private:
    int n;
    std::vector<T> tree;
    T sum(int p) {
        T res = 0;
        while (p > 0) {
            res += tree[p - 1];
            p -= p & -p;
        }
        return res;
    }
};

std::vector<std::map<int, int>> mat;
vi height, idx, init, color;
std::vector<pii> intervals;

int dfs(int u, int &time, int h, int cur) {
    color[u] = 1;
    // trace(u);
    height[u] = h;
    init[u] = cur;
    int begin = time;
    for (const auto &[v, w]: mat[u]) {
        if (color[v] == 0) {
            dfs(v, ++time, h + 1, cur + w);
        }
    }
    intervals[u] = std::pair{begin, time};
    idx[u] = begin;
    // trace(u _ intervals[u] _ idx[u]);
    return 0;
}

class Solution {
  public:
    std::vector<int> treeQueries(int n, std::vector<std::vector<int>> &edges,
                                 std::vector<std::vector<int>> &queries) {
        FenwickTree<int> ft(n + 11);
        // atcoder::fenwick_tree<int> ft(n + 11);
        mat = std::vector(n, std::map<int, int>());
        intervals = std::vector(n, std::pair{-1, -1});
        height = vi(n, 0);
        idx = vi(n, 0);
        init = vi(n, 0);
        color = vi(n, 0);
        int begin = 0;
        for (vi &t: edges) {
            int u = t[0];
            int v = t[1];
            int w = t[2];
            u--, v--;
            mat[u][v] = w;
            mat[v][u] = w;
        }
        dfs(0, begin, 0, 0); // height, mappings(idx), intervals

        vi ans;
        for (vi &q: queries) {
            int type = q[0];
            if (type == 1) {
                // update
                int u = q[1];
                int v = q[2];
                u--, v--;
                int w_prim = q[3];
                int delta = w_prim - mat[u][v];
                mat[u][v] = mat[v][u] = w_prim;
                if (height[u] < height[v]) {
                    std::swap(u, v);
                }
                // u is the child of v
                ft.update(intervals[u].X, delta);
                ft.update(intervals[u].Y + 1, -delta);
            } else {
                // report
                int u = q[1];
                u--;
                ans.push_back(init[u] + ft.sum(0, idx[u] + 1));
            }
        }
        return ans;
    }
};

int read_input() {
    int n;
    std::cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    std::vector<std::vector<int>> edges{{1, 2, 7}};
    std::vector<std::vector<int>> q{{2, 2}, {1, 1, 2, 4}, {2, 2}};
    auto ans = solution.treeQueries(2, edges, q);
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
