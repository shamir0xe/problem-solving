#include <bits/stdc++.h>

/**
 * problem C (3/4)
 * leetcode, biweekly-contest-155
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cout << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1000 * 100 + 5;
int n;

/**
 * define functions here
 **/
using namespace std;

class KMP {
    string pattern;
    vector<int> fail;

    void initKMP(const string &p) {
        pattern = p;
        int m = pattern.size();
        fail.assign(m + 1, -1);
        for (int i = 0, j = -1; i < m; i++) {
            while (j >= 0 && pattern[i] != pattern[j]) {
                j = fail[j];
            }
            j++;
            if (pattern[i + 1] == pattern[j]) {
                fail[i + 1] = fail[j];
            } else {
                fail[i + 1] = j;
            }
        }
    }

    void initMP(const string &p) {
        pattern = p;
        int m = pattern.size();
        fail.assign(m + 1, -1);
        for (int i = 0, j = -1; i < m; i++) {
            while (j >= 0 && pattern[i] != pattern[j]) {
                j = fail[j];
            }
            fail[i + 1] = ++j;
        }
    }

  public:
    KMP(const string &p) { initKMP(p); }

    int period(int i) { return i - fail[i]; }

    vector<int> match(const string &s) {
        int n = s.size();
        int m = pattern.size();
        vector<int> res;
        for (int i = 0, k = 0; i < n; i++) {
            while (k >= 0 && s[i] != pattern[k]) {
                k = fail[k];
            }
            k++;
            if (k == m) {
                res.push_back(i - m + 1);
            }
        }
        return res;
    }
};

std::vector<bool> give_marks(std::vector<pii> &events, int n, int m) {
    std::vector<bool> marks(n * m, false);
    int itr = 0;
    int i = 0;
    int depth = 0;
    while (i < n * m) {
        while (i < n * m && i < events[itr].X) {
            marks[i] = marks[i] | (depth > 0);
            i++;
        }
        if (i >= n * m) {
            break;
        }
        while (itr < sz(events) && i == events[itr].X) {
            if (events[itr].Y == -1) {
                depth++;
            } else {
                depth--;
            }
            itr++;
        }
    }
    // trace(marks);
    return marks;
}

class Solution {
  public:
    int countCells(vector<vector<char>> &grid, string pattern) {
        int n = sz(grid);
        int m = sz(grid[0]);

        KMP kmp(pattern);
        string str_row = "";
        for (int i: range(n)) {
            for (int j: range(m)) {
                str_row += grid[i][j];
            }
        }
        string str_col = "";
        for (int j: range(m)) {
            for (int i: range(n)) {
                str_col += grid[i][j];
            }
        }

        std::vector<pii> events;
        int depth = 0;
        vi idx1 = kmp.match(str_row);
        events.push_back({n * m, +2});
        for (int x: idx1) {
            events.push_back({x, -1});
            events.push_back({x + sz(pattern), +1});
        }
        sort(all(events));
        std::vector<bool> marks = give_marks(events, n, m);

        events = std::vector<pii>();
        vi idx2 = kmp.match(str_col);
        events.push_back({n * m, +2});
        for (int x: idx2) {
            events.push_back({x, -1});
            events.push_back({x + sz(pattern), +1});
        }
        sort(all(events));
        std::vector<bool> marks_two = give_marks(events, n, m);
        int cnt = 0;
        vvi board(n, vi(m, 0));
        for (int x: range(n * m)) {
            int i = x / m;
            int j = x % m;
            board[i][j] += marks[x] ? 1 : 0;

            j = x / n;
            i = x % n;
            board[i][j] += marks_two[x] ? 1 : 0;
        }

        for (int i: range(n)) {
            for (int j: range(m)) {
                cnt += board[i][j] == 2;
            }
        }
        return cnt;
    }
};

int read_input() {
    std::cin >> n;
    return 0;
}

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    auto ans = solution.assert_yellow("Hello");
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
