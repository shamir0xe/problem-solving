#include <bits/stdc++.h>
#include <sys/types.h>

/**
 * problem D (4/4)
 * leetcode, biweekly-contest-155
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cout << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i: range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = (1 << 22) + 22;
int dp[maxn];
int children[22];

/**
 * define functions here
 **/
inline vi off_ids(int &mask, int &n) {
    vi ids;
    int full = (1 << n) - 1;
    int prim_mask = full - mask;
    while (prim_mask) {
        int t = 31 - __builtin_clz(prim_mask);
        ids.push_back(t);
        prim_mask -= 1 << t;
    }
    return ids;
}

class Solution {
  public:
    int maxProfit(int n, vvi &edges, vi &score) {
        // memset(children, 0, sizeof children);
        memset(dp, -1, sizeof dp);

        for (vi &e: edges) {
            int u = e[0];
            int v = e[1];
            children[u] |= 1 << v;
        }
        dp[0] = 0;
        for (int mask = 0; mask < 1 << n; mask++) {
            if (dp[mask] == -1) {
                continue;
            }
            int cur_cnt = __builtin_popcount(mask);
            // those who are not in the mask, should
            // not have any edges to the cur mask
            int mask_prim = 0;
            vi offs = off_ids(mask, n);
            for (int i: offs) {
                mask_prim |= children[i];
            }
            if (mask_prim & mask) {
                // it cannot proceed further
                continue;
            } else {
                for (int i: offs) {
                    int alter_mask = mask | 1 << i;
                    int temp = dp[mask] + (cur_cnt + 1) * score[i];
                    if (temp > dp[alter_mask]) {
                        dp[alter_mask] = temp;
                    }
                }
            }
        }
        return dp[(1 << n) - 1];
    }
};

int read_input() { return 0; }

auto solve() {
    /**
     * main logic goes here
     **/
    Solution solution = Solution();
    int n = 2;
    vvi edges{{0, 1}};
    vi score{2, 3};

    // int n = 22;
    // vvi edges{};
    // vi score{41002, 84114, 72473, 50372, 27637, 49677, 99028, 32138,
    //          69574, 17771, 6616,  9088,  35952, 33898, 604,   22741,
    //          30163, 29844, 64865, 51934, 25778, 81502};
    auto ans = solution.maxProfit(n, edges, score);
    return ans;
}

int second_main() {
    read_input();
    auto ans = solve();
    std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
