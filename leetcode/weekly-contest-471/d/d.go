package main

import (
	"encoding/json"
	"fmt"
)

/**
 * problem D (4/4)
 * leetcode, weekly-contest-471
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

var maxn = 100000 + 10

func sumOfAncestors(n int, edges [][]int, nums []int) int64 {
	var adj [][]int = make([][]int, n)
	for _, edge := range edges {
		u := edge[0]
		v := edge[1]
		adj[u] = append(adj[u], v)
		adj[v] = append(adj[v], u)
	}
	fmt.Println("Here")

	var primes []int
	var eratesten []int = make([]int, maxn)
	for i := range maxn {
		eratesten[i] = 1
	}
	for i := 2; i < maxn; i++ {
		if eratesten[i] == 1 {
			primes = append(primes, i)
			for j := i + i; j < maxn; j += i {
				eratesten[j] = 0
			}
		}
	}

	fmt.Println("Here2")

	decompose := func(t int) string {
		var res []int
		for _, prime := range primes {
			if int64(prime)*int64(prime) > int64(t) {
				break
			}
			if t%prime == 0 {
				cnt := 0
				for t%prime == 0 {
					t /= prime
					cnt++
				}
				if cnt%2 == 1 {
					res = append(res, prime)
				}
			}
		}
		if t != 1 {
			res = append(res, t)
		}
		bytes, _ := json.Marshal(res)
		return string(bytes)
	}

	var dfs func(int, int, map[string]int) int64
	dfs = func(u, par int, curMap map[string]int) (res int64) {
		res = 0
		var key string = decompose(nums[u])
		if val, ok := curMap[key]; ok {
			res = int64(val)
		}
		curMap[key]++
		for _, v := range adj[u] {
			if v == par {
				continue
			}
			t := dfs(v, u, curMap)
			res += t
		}
		curMap[key]--
		return res
	}

	fmt.Println("Here3")
	curMap := make(map[string]int)
	fmt.Println("Here4")
	return dfs(0, -1, curMap)
}

func main() {
	fmt.Println("Hello world!")
}
