package main

import (
	"encoding/json"
	"fmt"
	"maps"
	"slices"
)

/**
 * problem C (3/4)
 * leetcode, weekly-contest-471
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

func longestBalanced(s string) int {
	stringify := func(arr []int) string {
		bytes, _ := json.Marshal(arr)
		return string(bytes)
	}
	var cur map[string]int = make(map[string]int)
	cur[stringify([]int{0, 0, 0})] = -1
	var arr []int = []int{0, 0, 0}
	n := len(s)
	var ans int = 0

	// 3 chars
	for i := range n {
		arr[int(s[i]-'a')]++
		for arr[0] > 0 && arr[1] > 0 && arr[2] > 0 {
			for j := range 3 {
				arr[j]--
			}
		}
		t := stringify(arr)
		if val, ok := cur[t]; ok {
			ans = max(ans, i-val)
		} else {
			cur[t] = i
		}
	}

	// 2 chars
	for j := range 3 {
		skipChar := byte('a' + j)
		arr = []int{0, 0, 0}
		cur = make(map[string]int)
		cur[stringify([]int{0, 0, 0})] = -1
		for i := range n {
			if s[i] == skipChar {
				arr = []int{0, 0, 0}
				cur = make(map[string]int)
				cur[stringify([]int{0, 0, 0})] = i
				continue
			}
			arr[int(s[i]-'a')]++

			check := make(map[int]int)
			tt := 0
			for _, v := range arr {
				if v != 0 {
					check[v] = 1
					tt ++
				}
			}
			if tt == 2 && len(check) == 1 {
				ans = max(ans, slices.Collect(maps.Keys(check))[0]*2)
			}

			t := stringify(arr)
			fmt.Println(t)
			if val, ok := cur[t]; ok {
				fmt.Println("We hit!")
				ans = max(ans, i-val)
			} else {
				cur[t] = i
			}
		}
	}

	// just one char
	lastChar := byte('z')
	curCount := 0
	for i := range n {
		if lastChar != s[i] {
			ans = max(ans, curCount)
			lastChar = s[i]
			curCount = 1
		} else {
			curCount++
		}
	}
	ans = max(ans, curCount)
	return ans
}

func main() {
	fmt.Println("Hello world!")
}
