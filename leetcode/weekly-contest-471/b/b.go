package main

import "fmt"

/**
 * problem B (2/4)
 * leetcode, weekly-contest-471
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

var (
	maxn = 33
)

func longestBalanced(s string) int {
	n := len(s)
	var counts [][]int = make([][]int, n)
	for i := range n {
		counts[i] = make([]int, maxn)
		for j := range maxn {
			counts[i][j] = 0
		}
	}
	// cum sum over s
	for i := range n {
		if i-1 >= 0 {
			for j := range maxn {
				counts[i][j] = counts[i-1][j]
			}
		}
		counts[i][int(s[i]-'a')]++
	}

	check := func(a1, a2 []int) bool {
		cnt := 0
		for i := range maxn {
			if a2[i]-a1[i] != 0 {
				if cnt == 0 {
					cnt = a2[i] - a1[i]
				} else {
					if cnt != a2[i]-a1[i] {
						return false
					}
				}
			}
		}
		return true
	}

	// iterate through i, j
	zeros := make([]int, maxn)
	for i := range maxn {
		zeros[i] = 0
	}
	var res int = 0
	for j := range n {
		for i := 0; i <= j; i++ {
			var first []int = zeros
			if i > 0 {
				first = counts[i-1]
			}
			if check(first, counts[j]) {
				res = max(res, j-i+1)
			}
		}
	}
	return max(res, 1)
}

func main() {
	fmt.Println("Hello world!")
}
