#include <algorithm>
#include <bits/stdc++.h>
#include <chrono>
#include <sys/resource.h>

/**
 * problem square-sums (1/1)
 * codewars, problemset
 * author: @shamir0xe
 * generated by contest-builder
 * https://github.com/shamir0xe/contest-builder
 **/

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;
typedef std::vector<long long> vl;
typedef std::vector<std::vector<int>> vvi;
typedef std::vector<std::vector<ll>> vvl;
#define trace(x) std::cerr << #x << " : " << x << std::endl
#define _ << " " <<
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define X first
#define Y second

/**
 * printing tuples
 **/
template <size_t n, typename... T>
typename std::enable_if<(n >= sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {};

template <size_t n, typename... T>
typename std::enable_if<(n < sizeof...(T))>::type
__tuple_printer(std::ostream &os, const std::tuple<T...> &tup) {
    if (n != 0) {
        os << " ";
    }
    os << std::get<n>(tup);
    __tuple_printer<n + 1>(os, tup);
};

template <typename... T>
std::ostream &operator<<(std::ostream &os, const std::tuple<T...> &tup) {
    os << "(";
    __tuple_printer<0>(os, tup);
    os << ")";
    return os;
}

/**
 * printing pairs
 **/
template <typename T, typename K>
std::ostream &operator<<(std::ostream &os, const std::pair<T, K> &p) {
    os << "(" << p.first << " " << p.second << ")";
    return os;
}

/**
 * printing vectors
 **/
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    os << "[";
    bool first = true;
    for (auto ii = v.begin(); ii != v.end(); ++ii) {
        if (first) {
            first = false;
        } else {
            os << " ";
        }
        os << (*ii);
    }
    os << "]";
    return os;
}

template <typename T, typename K = std::function<void(void)>>
void smin(T &a, T b, const K callable = []() {}) {
    if (a > b) {
        a = b;
        callable();
    }
}

template <typename T, typename K = std::function<void(void)>>
void smax(T &a, T b, const K callable = []() {}) {
    if (a < b) {
        a = b;
        callable();
    }
}

/**
 * range functions
 **/
inline vi range(int idx, int n) {
    if (n <= idx) {
        return vi();
    }
    vi indices(n - idx);
    for (int i = idx; i < n; ++i) {
        indices[i - idx] = i;
    }
    return indices;
}

inline vi range(int n) { return range(0, n); }

inline vi rrange(int idx, int n) {
    vi order = range(idx, n);
    reverse(all(order));
    return order;
}

inline vi rrange(int n) { return rrange(0, n); }

class Reader {
  public:
    template <typename T> inline static T primitive() {
        T temp;
        std::cin >> temp;
        return temp;
    }

    template <typename T> static std::vector<T> vector(int n) {
        std::vector<T> res(n);
        for (int &i : range(n)) {
            res[i] = Reader::primitive<T>();
        }
        return res;
    }

    static void sync() {
        std::ios_base::sync_with_stdio(false);
        std::cin.tie(nullptr);
    }
};

/**
 * define variables here
 **/
const int maxn = 1300 + 5;
int colors[maxn];
int cur_color;
int cap[maxn];
vi squares;
vvi edges;
int m;
const int TIME_LIMIT = 1 * 1000 * 1000;
std::chrono::steady_clock::time_point begin;

/**
 * define functions here
 **/

bool time_limit(int cur = -1, bool show = false) {
    std::chrono::steady_clock::time_point current =
        std::chrono::steady_clock::now();
    auto delta =
        std::chrono::duration_cast<std::chrono::microseconds>(current - begin)
            .count();
    if (delta > TIME_LIMIT) {
        trace(delta _ "TL" _ cur);
        return true;
    }
    if (show)
        trace(delta _ "PASSED" _ cur);
    return false;
}

int back_track(int u, int needed, vi &ans, vvi &edges) {
    // trace(u _ needed _ ans);
    if (time_limit(m)) {
        return -1;
    }
    if (needed == 0)
        return 0;
    colors[u] = cur_color;
    ans.push_back(u);
    needed--;
    if (needed == 0)
        return 1;

    for (int v : edges[u]) {
        if (colors[v] != cur_color) {
            cap[v]--;
        }
    }
    std::sort(all(edges[u]), [&](int x, int y) { return cap[x] < cap[y]; });

    for (int v : edges[u])
        if (colors[v] != cur_color) {
            int cnt = back_track(v, needed, ans, edges);
            if (cnt == needed) {
                return needed + 1;
            }
        }

    for (int v : edges[u]) {
        if (colors[v] != cur_color) {
            cap[v]++;
        }
    }
    colors[u] = 0;
    ans.pop_back();
    return -1;
}

std::vector<int> square_sums_row(int n) {
    begin = std::chrono::steady_clock::now();
    vi ans = vi();
    edges = vvi(n + 1, vi());
    squares = vi();
    for (int i : range(1, maxn)) {
        if (i * i > 2 * maxn) {
            break;
        }
        squares.push_back(i * i);
    }

    for (int candid : squares) {
        for (int i : range(1, candid)) {
            int other_half = candid - i;
            if (i == other_half || i > n || other_half > n)
                continue;
            edges[i].push_back(other_half);
            cap[other_half]++;
        }
    }
    int initiator = n;
    for (int i : range(1, n + 1)) {
        if (sz(edges[i]) <= sz(edges[initiator])) {
            initiator = i;
        }
    }
    cur_color++;
    for (int i : range(1, n + 1)) {
        std::sort(all(edges[i]),
                  [&](int a, int b) { return sz(edges[a]) < sz(edges[b]); });
    }
    back_track(initiator, n, ans, edges);
    return ans;
}

auto solve() {
    /**
     * main logic goes here
     **/
    std::cin >> m;
    return square_sums_row(m);
}

int second_main() {
    auto ans = solve();
    for (int i : range(sz(ans))) {
        std::cout << ans[i] << " \n"[i == sz(ans) - 1];
    }
    // std::cout << ans << std::endl;
    return 0;
}

int main() {
    Reader::sync();
    bool test_case = false;
    if (test_case) {
        int t;
        std::cin >> t;
        while (t--) {
            second_main();
        }
    } else {
        second_main();
    }
    return 0;
}
